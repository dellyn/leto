{"version":3,"sources":["constants/constants.ts","components/InputField/InputField.tsx","components/TaskField/TaskField.tsx","hooks/useMount.tsx","components/Blank/constants.ts","hooks/useKeyboardNavigation.tsx","helpers/helpers.ts","components/Board/constants.ts","components/Blank/Blank.tsx","hooks/useWindowDimensions.tsx","components/Carousel/constants.ts","components/Carousel/Carousel.jsx","components/Board/Board.tsx","context/SettingsContext.tsx","components/Theme/ThemeSwitcher.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","constants/settings.ts","App.tsx","index.jsx"],"names":["inputFieldValidationRegEx","taskDefaultModel","id","value","label","done","flag","blankDefaultModel","date","tasks","Array","keys","map","additionalInfo","screenSize","TodoField","props","data","onFieldChange","handleKeyNavigation","blankId","active","checkedStatus","setCheckedStatus","isDisabled","setIsDisabled","useState","fieldValue","setFieldValue","todoRef","useRef","deleteTask","name","todoId","canEditTodo","length","canDeleteTodo","className","onClick","title","onChange","e","target","replace","stopPropagation","onBlur","onFocus","onKeyDown","disabled","ref","htmlFor","current","selectionStart","focus","TaskField","listCounter","configClasses","InputField","task","updatedData","useActionAfterMount","deps","callback","isMounted","useEffect","timeout","setTimeout","clearTimeout","keyCodes","useKeyboardNavigation","formRef","index","nextFocusInput","setNextFocusInputAfterDelete","event","form","currentInputCarretPosition","currentTarget","prototype","indexOf","call","prevInput","elements","nextInput","currentInput","regularActions","input","cursorPos","inputForTrigger","preventDefault","inputField","enteredValue","lastValue","Event","bubbles","tracker","_valueTracker","setValue","dispatchEvent","triggerInput","keyCode","LSDataName","currentDate","moment","updateStorage","localStorage","setItem","JSON","stringify","compareAtPresentDay","isSame","source","getItem","Blank","onSave","blankData","setBlankData","dayOfWeek","format","configureAndSetBlankInfo","model","updatedTasks","prevData","tasksArrLength","numberOfFilledFields","reduce","counter","lastElementId","push","filteredBlankTasks","filter","field","controlNumberOfTasks","firstInput","lastInput","setInitialFocus","useSaveData","isBefore","isAfter","compareAtFutureDay","getTimeStatus","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","desktopSettings","slidesPerView","mobileSettings","centeredSlides","spaceBetween","nextBtnClass","prevBtnClass","SwiperCore","use","Navigation","Virtual","CarouselComponent","todaySlideIndex","onReachSliderEnd","initSettings","activeIndex","swiper","swiperData","setSwiperData","settings","setSettings","isUserInPrevBlanks","isUserInNextBlanks","isTodayBlankHidden","slideTo","onSwiper","initFocusSlide","pagination","navigation","nextEl","prevEl","onSlideChange","onReachEnd","virtual","blankInfo","idx","virtualIndex","Board","parse","appData","setAppData","createBlanksByCount","count","blanksArr","i","nextDayDate","add","lastBlankIndex","createNewBlank","addNewBlanksToBoard","updatedAppData","isArray","concat","findIndex","item","Carousel","blank","lastSlideDate","slidesCount","SettingsContext","React","createContext","setTheme","themeType","ThemeSwitcher","useContext","defaultChecked","theme","checked","setChecked","type","Header","Footer","LSSettingsName","appSettings","storageSettings","App","changeTheme","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33beb5a0.chunk.js","sourcesContent":["import { IBlank, ITask } from \"./types\";\r\n\r\nexport const inputFieldValidationRegEx = /\\s\\s+/g;\r\nexport const defaultNumberOfTasks = 1;\r\n\r\nexport const taskDefaultModel: ITask = {\r\n  id: null,\r\n  value: null,\r\n  label: \"\",\r\n  done: false,\r\n  flag: \"\",\r\n};\r\n\r\nexport const defaultTasksField = (): ITask[] => {\r\n  const fieldsNumber = [...new Array(defaultNumberOfTasks).keys()];\r\n  return fieldsNumber.map((id) => {\r\n    const task = { ...taskDefaultModel, id };\r\n    return task;\r\n  });\r\n};\r\n\r\nexport const blankDefaultModel: IBlank = {\r\n  date: null,\r\n  id: null,\r\n  tasks: defaultTasksField(),\r\n  additionalInfo: {\r\n    label: \"\",\r\n  },\r\n};\r\n\r\nexport const screenSize = {\r\n  lg: 1400,\r\n  md: 1100,\r\n  sm: 900,\r\n  xs: 650,\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { IInputFieldProps } from \"./types\";\r\nimport { inputFieldValidationRegEx } from \"constants/constants\";\r\n\r\nimport \"./inputField.scss\";\r\n\r\ntype TodoClickEvent<T> = React.MouseEvent<T, MouseEvent>;\r\n\r\nconst TodoField = (props: IInputFieldProps) => {\r\n  const {\r\n    data,\r\n    onFieldChange,\r\n    handleKeyNavigation,\r\n    blankId,\r\n    active,\r\n    checkedStatus,\r\n    setCheckedStatus,\r\n    isDisabled,\r\n    setIsDisabled,\r\n  } = props;\r\n\r\n  const [fieldValue, setFieldValue] = useState<string>(data.label);\r\n  const todoRef = useRef<HTMLInputElement>(null);\r\n\r\n  const deleteTask = () => {\r\n    onFieldChange({ name: \"done\", value: false });\r\n    onFieldChange({ name: \"label\", value: \"\" });\r\n  };\r\n\r\n  const onTodoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value.replace(inputFieldValidationRegEx, \" \");\r\n\r\n    if (value) {\r\n      onFieldChange({ name: \"label\", value: value });\r\n    }\r\n\r\n    handleKeyNavigation(e, value);\r\n    setFieldValue(value);\r\n  };\r\n\r\n  const onDoneStatusChange = () => {\r\n    if (fieldValue) {\r\n      onFieldChange({ name: \"done\", value: !checkedStatus });\r\n      setCheckedStatus(!checkedStatus);\r\n    }\r\n  };\r\n\r\n  const onTodoBlur = () => {\r\n    active && setIsDisabled(true);\r\n    if (!fieldValue) {\r\n      deleteTask();\r\n    }\r\n  };\r\n\r\n  const onTodoFocus = () => {\r\n    setIsDisabled(false);\r\n  };\r\n\r\n  const onEditTodo = (e: TodoClickEvent<HTMLLabelElement>) => {\r\n    e.stopPropagation();\r\n    todoRef.current.disabled = false;\r\n    todoRef.current.selectionStart = todoRef.current.value?.length;\r\n    todoRef.current.focus();\r\n    setIsDisabled(false);\r\n  };\r\n  const onDeleteTodo = (e: TodoClickEvent<HTMLLabelElement>) => {\r\n    e.stopPropagation();\r\n    deleteTask();\r\n    setFieldValue(\"\");\r\n  };\r\n\r\n  const onTodoClickEvent = (e: TodoClickEvent<HTMLInputElement>) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  const todoId = `input${blankId}${data.id}`;\r\n\r\n  const canEditTodo = !checkedStatus && fieldValue.length > 0 && isDisabled;\r\n  const canDeleteTodo = checkedStatus && fieldValue.length > 0;\r\n\r\n  return (\r\n    <div\r\n      className={`input-field ${isDisabled && active ? \"active\" : \"inactive\"}`}\r\n      onClick={onDoneStatusChange}\r\n    >\r\n      <input\r\n        className=\"todo\"\r\n        id={todoId}\r\n        value={fieldValue}\r\n        title={fieldValue}\r\n        onChange={onTodoChange}\r\n        onClick={onTodoClickEvent}\r\n        onBlur={onTodoBlur}\r\n        onFocus={onTodoFocus}\r\n        onKeyDown={handleKeyNavigation}\r\n        disabled={isDisabled}\r\n        ref={todoRef}\r\n      />\r\n      {canEditTodo && (\r\n        <label\r\n          htmlFor={todoId}\r\n          className=\"todo-btn edit-btn\"\r\n          onClick={onEditTodo}\r\n        >\r\n          &#9998;\r\n        </label>\r\n      )}\r\n      {canDeleteTodo && (\r\n        <label\r\n          htmlFor={todoId}\r\n          className=\"todo-btn delete-btn\"\r\n          onClick={onDeleteTodo}\r\n        >\r\n          &#10006;\r\n        </label>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoField;\r\n","import InputField from \"../InputField/InputField\";\r\nimport { ITaskData } from \"constants/types\";\r\nimport { ITaskFieldProps } from \"./types\";\r\nimport \"./taskField.scss\";\r\nimport { useState } from \"react\";\r\n\r\nconst TaskField = (props: ITaskFieldProps) => {\r\n  const {\r\n    onFieldChange,\r\n    data,\r\n    handleKeyNavigation,\r\n    listCounter,\r\n    blankId,\r\n    active,\r\n  } = props;\r\n\r\n  const [checkedStatus, setCheckedStatus] = useState<boolean>(data.done);\r\n  const [isDisabled, setIsDisabled] = useState<boolean>(active);\r\n\r\n  const onTaskChange = (task: ITaskData) => {\r\n    const updatedData = { ...data, [task.name]: task.value };\r\n    onFieldChange({ name: \"tasks\", value: updatedData });\r\n  };\r\n\r\n  const configClasses = `${checkedStatus ? \"done\" : \"\"} ${\r\n    isDisabled ? \"disabled\" : \"enabled\"\r\n  }\r\n  `;\r\n\r\n  return (\r\n    <div className={`task-field ${configClasses}`}>\r\n      <span className=\"list-counter\">{listCounter + 1}.</span>\r\n      <InputField\r\n        data={data}\r\n        key={data.id}\r\n        onFieldChange={onTaskChange}\r\n        handleKeyNavigation={handleKeyNavigation}\r\n        listCounter={listCounter}\r\n        blankId={blankId}\r\n        checkedStatus={checkedStatus}\r\n        setCheckedStatus={setCheckedStatus}\r\n        setIsDisabled={setIsDisabled}\r\n        isDisabled={isDisabled}\r\n        active={active}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskField;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nconst useActionAfterMount = (deps: any, callback: any) => {\r\n  const isMounted = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (isMounted.current) {\r\n      const timeout = setTimeout(() => {\r\n        callback();\r\n      }, 500);\r\n\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    } else {\r\n      isMounted.current = true;\r\n    }\r\n  }, [deps]);\r\n};\r\n\r\nexport default useActionAfterMount;\r\n","export const keyCodes = {\r\n  bottomArrow: 40,\r\n  topArrow: 38,\r\n  leftArrow: 37,\r\n  enter: 13,\r\n  delete: 8,\r\n};\r\n","import { useState } from \"react\";\r\nimport { keyCodes } from \"../components/Blank/constants\";\r\nimport { triggerInput } from \"helpers/helpers\";\r\nimport { IInputKeyNavEvent } from \"constants/types\";\r\n\r\nconst useKeyboardNavigation = (formRef: any) => {\r\n  const [nextFocusInput, setNextFocusInputAfterDelete] = useState({\r\n    index: null,\r\n  });\r\n\r\n  const handleKeyNavigation = (\r\n    event: IInputKeyNavEvent,\r\n    fieldValue: string\r\n  ) => {\r\n    const form = formRef.current;\r\n\r\n    if (form) {\r\n      // currentTarget vs target\r\n      const currentInputCarretPosition = event.currentTarget.selectionStart!;\r\n      const index = Array.prototype.indexOf.call(form, event.target);\r\n      // if form html structure will be changed it's possible to crash\r\n      const inputsStep = 1;\r\n      const prevInput = form.elements[index - inputsStep];\r\n      const nextInput = form.elements[index + inputsStep];\r\n      const currentInput = form.elements[index];\r\n\r\n      if (fieldValue === \"\") {\r\n        setNextFocusInputAfterDelete({ index });\r\n      }\r\n\r\n      const regularActions = (\r\n        input: HTMLInputElement,\r\n        cursorPos?: number,\r\n        inputForTrigger?: HTMLInputElement\r\n      ) => {\r\n        event.preventDefault();\r\n        input.disabled = false;\r\n        if (inputForTrigger) triggerInput(inputForTrigger);\r\n        if (cursorPos) input.selectionStart = cursorPos;\r\n        input.focus();\r\n      };\r\n      switch (event.keyCode) {\r\n        case keyCodes.enter:\r\n          if (nextInput) {\r\n            regularActions(nextInput, nextInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.delete:\r\n          if (currentInput.value.length === 0 && prevInput) {\r\n            regularActions(prevInput, prevInput.value?.length, currentInput);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.topArrow:\r\n          if (prevInput) {\r\n            regularActions(prevInput, prevInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.bottomArrow:\r\n          if (nextInput) {\r\n            regularActions(nextInput, nextInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.leftArrow:\r\n          if (currentInputCarretPosition === 0 && prevInput) {\r\n            regularActions(prevInput, prevInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n  return { nextFocusInput, handleKeyNavigation };\r\n};\r\n\r\nexport default useKeyboardNavigation;\r\n","import { taskDefaultModel, defaultNumberOfTasks } from \"constants/constants\";\r\nimport { IBlank, ITask } from \"constants/types\";\r\n\r\nexport const controlNumberOfTasks = (data: IBlank) => {\r\n  const tasksArrLength = data.tasks.length;\r\n\r\n  if (tasksArrLength >= defaultNumberOfTasks) {\r\n    const numberOfFilledFields = data.tasks.reduce(\r\n      (counter: number, task: ITask) => {\r\n        return task.label ? counter + 1 : counter;\r\n      },\r\n      0\r\n    );\r\n    // add new field if all is full\r\n    if (numberOfFilledFields === tasksArrLength) {\r\n      const updatedTasks = data.tasks;\r\n      const lastElementId = updatedTasks[updatedTasks.length - 1].id;\r\n\r\n      updatedTasks.push({\r\n        ...taskDefaultModel,\r\n        id: lastElementId + 1,\r\n      });\r\n      return { ...data, tasks: updatedTasks };\r\n    }\r\n    // delete empty fields\r\n    else if (numberOfFilledFields < tasksArrLength - 1) {\r\n      const filteredBlankTasks = data.tasks.filter(\r\n        (field: ITask, index: number) =>\r\n          field.label || index === tasksArrLength - 1\r\n      );\r\n      return { ...data, tasks: filteredBlankTasks };\r\n    } else {\r\n      return data;\r\n    }\r\n  }\r\n};\r\n\r\nexport const triggerInput = (inputField: any, enteredValue = \"\") => {\r\n  const input = inputField;\r\n  const lastValue = input.value;\r\n  input.value = enteredValue;\r\n\r\n  const event = new Event(\"input\", { bubbles: true });\r\n  const tracker = input._valueTracker!;\r\n\r\n  if (tracker) {\r\n    tracker.setValue(lastValue);\r\n  }\r\n\r\n  input.dispatchEvent(event);\r\n};\r\n","import { IBlank } from \"../../constants/types\";\r\nimport moment from \"moment\";\r\n\r\nexport const timeFormat = \"L\";\r\nexport const daysOfTheWeek = 7;\r\nexport const LSDataName = \"letoAppData\";\r\nexport const currentDate = moment();\r\nexport const blankDateFormat = \"MMM DD[, ] YY\";\r\n\r\nexport const updateStorage = (data: IBlank[]) => {\r\n  localStorage.setItem(LSDataName, JSON.stringify(data));\r\n};\r\n\r\nexport const compareAtPresentDay = (date: string) => {\r\n  return moment(date).isSame(currentDate, \"day\");\r\n};\r\nexport const compareAtPastDay = (date: string) => {\r\n  return moment(date).isBefore(currentDate, \"day\");\r\n};\r\n\r\nexport const compareAtFutureDay = (date: string) => {\r\n  return moment(date).isAfter(currentDate, \"day\");\r\n};\r\n\r\nexport const source = localStorage.getItem(LSDataName);\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport TaskField from \"components/TaskField/TaskField\";\r\nimport useSaveData from \"hooks/useMount\";\r\nimport { controlNumberOfTasks } from \"helpers/helpers\";\r\nimport { IBlank, ITask, IUpdModel } from \"constants/types\";\r\nimport { IBlankProps } from \"./types\";\r\nimport useKeyboardNavigation from \"../../hooks/useKeyboardNavigation\";\r\n\r\nimport \"./blank.scss\";\r\nimport {\r\n  compareAtPresentDay,\r\n  compareAtPastDay,\r\n  compareAtFutureDay,\r\n  blankDateFormat,\r\n} from \"components/Board/constants\";\r\n\r\nconst Blank = (props: IBlankProps) => {\r\n  const { data, onSave } = props;\r\n\r\n  const [blankData, setBlankData] = useState<IBlank>({\r\n    tasks: data.tasks,\r\n    id: data.id,\r\n    date: data.date,\r\n    additionalInfo: data.additionalInfo,\r\n  });\r\n\r\n  const formRef = useRef(null);\r\n  const dayOfWeek = moment(blankData.date).format(\"dddd\");\r\n\r\n  const { nextFocusInput, handleKeyNavigation } =\r\n    useKeyboardNavigation(formRef);\r\n\r\n  const configureAndSetBlankInfo = (model: IUpdModel) => {\r\n    if (model.name === \"tasks\") {\r\n      const updatedTasks = blankData.tasks.map((task: ITask) => {\r\n        return task.id === model.value.id ? model.value : task;\r\n      });\r\n\r\n      setBlankData((prevData) => {\r\n        const copyData = { ...prevData, tasks: updatedTasks };\r\n        const updatedData = controlNumberOfTasks(copyData);\r\n        return updatedData;\r\n      });\r\n    } else {\r\n      setBlankData((prevData) => {\r\n        return { ...prevData, [model.name]: model.value };\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (nextFocusInput.index !== null) {\r\n      formRef.current.elements[nextFocusInput.index].focus();\r\n    }\r\n  }, [nextFocusInput]);\r\n\r\n  useEffect(() => {\r\n    const setInitialFocus = () => {\r\n      const isTodayBlank = compareAtPresentDay(blankData.date);\r\n      if (isTodayBlank && formRef) {\r\n        const form = formRef.current;\r\n        const firstInput = form.elements[0];\r\n        const lastInput = form.elements[form.elements.length - 1];\r\n\r\n        if (!firstInput.value) {\r\n          firstInput.focus();\r\n        } else {\r\n          lastInput.focus();\r\n        }\r\n      }\r\n    };\r\n    setInitialFocus();\r\n  }, []);\r\n\r\n  useSaveData(blankData, () => onSave(blankData));\r\n\r\n  const getTimeStatus = () => {\r\n    switch (true) {\r\n      case compareAtPastDay(blankData.date):\r\n        return \"past\";\r\n      case compareAtFutureDay(blankData.date):\r\n        return \"future\";\r\n      default:\r\n        return \"present\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`blank ${getTimeStatus()}`}>\r\n      <h2 className=\"week-day\">{dayOfWeek}</h2>\r\n      <p className=\"date\">{moment(blankData.date).format(blankDateFormat)}</p>\r\n\r\n      <form className=\"fields-list scroll\" ref={formRef}>\r\n        {blankData.tasks.map((task, index) => {\r\n          return (\r\n            <TaskField\r\n              data={task}\r\n              key={task.id}\r\n              listCounter={index}\r\n              blankId={blankData.id}\r\n              onFieldChange={configureAndSetBlankInfo}\r\n              handleKeyNavigation={handleKeyNavigation}\r\n              active={index !== blankData.tasks.length - 1}\r\n            />\r\n          );\r\n        })}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blank;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst getWindowDimensions = () => {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return { width, height };\r\n};\r\n\r\nconst useWindowDimensions = () => {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowDimensions(getWindowDimensions());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n};\r\n\r\nexport default useWindowDimensions;\r\n","export const desktopSettings = { slidesPerView: 5 };\r\nexport const mobileSettings = {\r\n  slidesPerView: 1.3,\r\n  centeredSlides: true,\r\n  spaceBetween: 30,\r\n};\r\nexport const nextBtnClass = \"btnNextSlide\";\r\nexport const prevBtnClass = \"btnPrevSlide\";\r\n","import { useEffect, useState } from \"react\";\r\nimport Blank from \"../Blank/Blank\";\r\nimport useWindowDimensions from \"hooks/useWindowDimensions\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport SwiperCore, { Navigation, Virtual } from \"swiper\";\r\nimport {\r\n  desktopSettings,\r\n  mobileSettings,\r\n  nextBtnClass,\r\n  prevBtnClass,\r\n} from \"./constants\";\r\nimport { screenSize } from \"constants/constants\";\r\nimport \"swiper/components/navigation/navigation.min.css\";\r\nimport \"swiper/swiper.scss\";\r\nimport \"./carousel.scss\";\r\n\r\nSwiperCore.use([Navigation, Virtual]);\r\nconst slidesPerView = 4.33;\r\n\r\nconst CarouselComponent = (props) => {\r\n  const { todaySlideIndex, onReachSliderEnd, data } = props;\r\n  const { width } = useWindowDimensions();\r\n  const initSettings = width < screenSize.xs ? mobileSettings : desktopSettings;\r\n\r\n  const [swiperData, setSwiperData] = useState({\r\n    activeIndex: null,\r\n    swiper: null,\r\n  });\r\n  const [settings, setSettings] = useState(initSettings);\r\n\r\n  const isUserInPrevBlanks =\r\n    todaySlideIndex > swiperData.activeIndex + slidesPerView;\r\n  const isUserInNextBlanks = todaySlideIndex < swiperData.activeIndex;\r\n  const isTodayBlankHidden = isUserInPrevBlanks || isUserInNextBlanks;\r\n\r\n  const onSwiper = (swiper) => {\r\n    const initFocusSlide =\r\n      width < screenSize.xs ? todaySlideIndex : todaySlideIndex - 1;\r\n    swiper.slideTo(initFocusSlide, 0);\r\n  };\r\n\r\n  const navigateToTodayBlank = () => {\r\n    swiperData?.swiper.slideTo(todaySlideIndex - 1, 0);\r\n  };\r\n  const onSlideChange = (swiper) => {\r\n    setSwiperData({ activeIndex: swiper.activeIndex, swiper });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (width < screenSize.xs) {\r\n      setSettings(mobileSettings);\r\n    } else if (width < screenSize.sm) {\r\n      setSettings({\r\n        slidesPerView: 2.5,\r\n        centeredSlides: true,\r\n      });\r\n    } else {\r\n      setSettings({ slidesPerView });\r\n    }\r\n  }, [width]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"buttons\">\r\n        <span className={`nav-btn btnSlide ${prevBtnClass}`}></span>\r\n        {isTodayBlankHidden && (\r\n          <span\r\n            className=\"nav-btn nav-btn-small home-page\"\r\n            onClick={navigateToTodayBlank}\r\n          ></span>\r\n        )}\r\n        <span className={`nav-btn btnSlide ${nextBtnClass}`}></span>\r\n      </div>\r\n\r\n      <Swiper\r\n        {...settings}\r\n        onSwiper={onSwiper}\r\n        pagination={true}\r\n        navigation={{ nextEl: `.${nextBtnClass}`, prevEl: `.${prevBtnClass}` }}\r\n        onSlideChange={onSlideChange}\r\n        onReachEnd={onReachSliderEnd}\r\n        virtual\r\n      >\r\n        {data.map((blankInfo, idx) => {\r\n          return (\r\n            <SwiperSlide key={`data-blank${idx}`} virtualIndex={idx}>\r\n              <Blank data={blankInfo} onSave={props.onSave} />\r\n            </SwiperSlide>\r\n          );\r\n        })}\r\n      </Swiper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CarouselComponent;\r\n","import { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport CarouselComponent from \"../Carousel/Carousel\";\r\nimport { blankDefaultModel } from \"../../constants/constants\";\r\nimport { IBlank } from \"constants/types\";\r\n\r\nimport {\r\n  daysOfTheWeek,\r\n  updateStorage,\r\n  compareAtPresentDay,\r\n  source,\r\n} from \"./constants\";\r\n\r\nimport \"./board.scss\";\r\n\r\nconst Board = () => {\r\n  const [appData, setAppData] = useState<IBlank[]>(JSON.parse(source) || []);\r\n\r\n  const createBlanksByCount = (count: number, date?: string) => {\r\n    const blanksArr = [];\r\n    const isInitialApp = !date;\r\n    for (let i = isInitialApp ? -1 : 1; i <= count; i++) {\r\n      const nextDayDate = moment(date).add(i, \"days\");\r\n      const lastBlankIndex = appData.length - 1 + i;\r\n      blanksArr.push(createNewBlank(nextDayDate, lastBlankIndex));\r\n    }\r\n    return blanksArr;\r\n  };\r\n\r\n  const createNewBlank = (date: any, id: number) => {\r\n    return { ...blankDefaultModel, date: date, id: id };\r\n  };\r\n\r\n  const addNewBlanksToBoard = (data: IBlank[] | IBlank) => {\r\n    let updatedAppData = [];\r\n\r\n    if (Array.isArray(data)) {\r\n      updatedAppData = appData.concat(data);\r\n    } else {\r\n      updatedAppData.push(data);\r\n    }\r\n\r\n    setAppData(updatedAppData);\r\n    updateStorage(updatedAppData);\r\n  };\r\n\r\n  const onSave = (model: IBlank) => {\r\n    const updatedAppData = appData.map((blank) => {\r\n      return blank.id === model.id ? model : blank;\r\n    });\r\n\r\n    setAppData(updatedAppData);\r\n    updateStorage(updatedAppData);\r\n  };\r\n\r\n  const onReachSliderEnd = () => {\r\n    const lastSlideDate = appData[appData.length - 1].date;\r\n    addNewBlanksToBoard(createBlanksByCount(daysOfTheWeek, lastSlideDate));\r\n  };\r\n\r\n  const todaySlideIndex = appData.findIndex((item: IBlank) =>\r\n    compareAtPresentDay(item.date)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const firstInitialApp = () => {\r\n      if (appData.length <= daysOfTheWeek) {\r\n        addNewBlanksToBoard(createBlanksByCount(daysOfTheWeek));\r\n      }\r\n    };\r\n\r\n    firstInitialApp();\r\n  }, []);\r\n\r\n  // custom live pagination, month and week navigation in v2\r\n  const showPrevBlanks = () => {};\r\n  const showNextBlnks = () => {};\r\n  const navigateToDate = () => {};\r\n  const exportToExcel = () => {};\r\n\r\n  return (\r\n    <>\r\n      <div className=\"board-wrapper\">\r\n        <div className=\"container\">\r\n          <div className=\"board\">\r\n            <CarouselComponent\r\n              data={appData}\r\n              onSave={onSave}\r\n              onReachSliderEnd={onReachSliderEnd}\r\n              slidesCount={appData.length}\r\n              todaySlideIndex={todaySlideIndex}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nexport const SettingsContext = React.createContext({\r\n  settings: null,\r\n  setTheme: (themeType: string) => {},\r\n});\r\n","import { useContext, useState } from \"react\";\r\nimport { SettingsContext } from \"context/SettingsContext\";\r\nimport \"./styles.scss\";\r\n\r\nconst ThemeSwitcher = () => {\r\n  const { settings, setTheme } = useContext(SettingsContext);\r\n  const defaultChecked = settings.theme === \"light\" ? false : true;\r\n\r\n  const [checked, setChecked] = useState(defaultChecked);\r\n\r\n  const handleChange = () => {\r\n    setChecked(!checked);\r\n    setTheme(checked ? \"light\" : \"dark\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"theme-btn\">\r\n      <label className=\"switch\">\r\n        <input\r\n          id=\"toggle\"\r\n          type=\"checkbox\"\r\n          checked={checked}\r\n          onChange={handleChange}\r\n        />\r\n        <span className=\"slider\"></span>\r\n      </label>\r\n      <div className=\"slide-block slide-out\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeSwitcher;\r\n","import React from \"react\";\r\n\r\nimport \"./header.scss\";\r\n\r\nimport ThemeSwitcher from \"components/Theme/ThemeSwitcher\";\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header-wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <h1 className=\"head-title\">LETO</h1>\r\n          <div className=\"right\">\r\n            <ThemeSwitcher />\r\n            <div className=\"account\">Ingvar</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import Rating from \"components/Rating/Rating\";\r\nimport \"./footer.scss\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer-wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"footer\">\r\n          {/* <nav className=\"footer-menu\">\r\n            <ul>\r\n              <li className=\"menu-item\">Contacts & Support</li>\r\n              <li className=\"menu-item\">Report</li>\r\n            </ul>\r\n          </nav>\r\n          <Rating /> */}\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export const LSSettingsName = \"letoSettings\";\r\nexport const appSettings: IAppSettings = {\r\n  theme: \"dark\",\r\n};\r\nexport interface IAppSettings {\r\n  theme: string;\r\n}\r\n","import \"./App.scss\";\r\nimport Board from \"components/Board/Board\";\r\nimport Header from \"components/Header/Header\";\r\nimport Footer from \"components/Footer/Footer\";\r\nimport { SettingsContext } from \"context/SettingsContext\";\r\nimport { useState } from \"react\";\r\nimport { appSettings, LSSettingsName, IAppSettings } from \"constants/settings\";\r\n\r\nimport \"components/Theme/dark-theme.scss\";\r\n\r\nconst storageSettings = JSON.parse(localStorage.getItem(LSSettingsName));\r\nif (!storageSettings) {\r\n  localStorage.setItem(LSSettingsName, JSON.stringify(appSettings));\r\n}\r\nconst settings = storageSettings || appSettings;\r\n\r\nconst updateSettings = (settings: IAppSettings) => {\r\n  localStorage.setItem(LSSettingsName, JSON.stringify(settings));\r\n};\r\n\r\nconst App = () => {\r\n  const [theme, changeTheme] = useState(settings.theme);\r\n\r\n  const setTheme = (theme: string) => {\r\n    changeTheme(theme);\r\n    settings.theme = theme;\r\n    updateSettings(settings);\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={{ settings, setTheme }}>\r\n      <div className={`LETO ${theme}`}>\r\n        <Header />\r\n        <Board />\r\n        <Footer />\r\n      </div>\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}