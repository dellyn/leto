{"version":3,"sources":["constants/constants.ts","components/InputField/InputField.tsx","components/TaskField/TaskField.tsx","hooks/useMount.tsx","components/AdditionalPopup/AdditionalPopup.tsx","components/Blank/constants.ts","hooks/useKeyboardNavigation.tsx","helpers/helpers.ts","components/Blank/Blank.tsx","hooks/useWindowDimensions.tsx","components/Carousel/constants.ts","components/Carousel/Carousel.jsx","components/Board/constants.ts","components/Board/Board.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","App.js","index.jsx"],"names":["inputFieldValidationRegEx","taskDefaultModel","id","value","label","done","flag","blankDefaultModel","date","tasks","Array","keys","map","timeStatus","additionalInfo","screenSize","TodoField","props","data","onFieldChange","handleKeyNavigation","blankId","active","checkedStatus","setCheckedStatus","useState","fieldValue","setFieldValue","isDisabled","setIsDisabled","todoRef","useRef","configClass","todoId","canEditTodo","length","canDeleteTodo","className","onClick","name","title","onChange","e","target","replace","stopPropagation","onBlur","onFocus","onKeyDown","disabled","ref","htmlFor","current","selectionStart","focus","TaskField","listCounter","InputField","task","updatedData","useActionAfterMount","deps","callback","isMounted","useEffect","timeout","setTimeout","clearTimeout","AdditionalPopup","setValue","isOpen","setIsOpen","textareaRef","handleOpenPopup","textarea","onMouseLeave","event","placeholder","keyCodes","useKeyboardNavigation","formRef","index","nextFocusInput","setNextFocusInputAfterDelete","form","currentInputCarretPosition","currentTarget","prototype","indexOf","call","prevInput","elements","nextInput","currentInput","regularActions","input","cursorPos","inputForTrigger","preventDefault","inputField","enteredValue","lastValue","Event","bubbles","tracker","_valueTracker","dispatchEvent","triggerInput","keyCode","Blank","onSave","blankData","setBlankData","dayOfWeek","moment","format","configData","model","updatedTasks","prevData","tasksArrLength","numberOfFilledFields","reduce","counter","lastElementId","push","filteredBlankTasks","filter","field","controlNumberOfTasks","firstInput","lastInput","initialFocus","useSaveData","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","desktopSettings","slidesPerView","mobileSettings","centeredSlides","spaceBetween","nextBtnClass","prevBtnClass","SwiperCore","use","Navigation","CarouselComponent","todaySlideIndex","activeIndex","swiper","swiperData","setSwiperData","initSettings","settings","setSettings","activeSlideNotToday","slideTo","onSwiper","console","log","initFocusSlide","pagination","navigation","nextEl","prevEl","onSlideChange","idx","virtualIndex","LSDataName","LSLastUpdateDateName","updateStorage","localStorage","setItem","JSON","stringify","currentDate","source","getItem","Board","parse","appData","setAppData","configTimeStatus","newModel","isDayInPast","isBefore","isDayInFuture","isAfter","isDayInPresent","isSame","createBlanksByCount","count","blanksArr","i","nextDay","add","createNewBlank","blank","addNewBlanks","updatedAppData","isArray","concat","findIndex","item","lastUpdateDateSource","lastUpdateDate","everydayUpdateApp","Carousel","onSlideEnded","lastSlideDate","slidesCount","Header","Footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b671061.chunk.js","sourcesContent":["import { IBlank, ITask } from \"./types\";\r\n\r\nexport const inputFieldValidationRegEx = /\\s\\s+/g;\r\nexport const defaultNumberOfTasks = 1;\r\n\r\nexport const taskDefaultModel: ITask = {\r\n  id: null,\r\n  value: null,\r\n  label: \"\",\r\n  done: false,\r\n  flag: \"\",\r\n};\r\n\r\nexport const defaultTasksField = (): ITask[] => {\r\n  const fieldsNumber = [...new Array(defaultNumberOfTasks).keys()];\r\n  return fieldsNumber.map((id) => {\r\n    const task = { ...taskDefaultModel, id };\r\n    return task;\r\n  });\r\n};\r\n\r\nexport const blankDefaultModel: IBlank = {\r\n  date: null,\r\n  id: null,\r\n  tasks: defaultTasksField(),\r\n  timeStatus: null,\r\n  additionalInfo: {\r\n    label: \"\",\r\n  },\r\n};\r\n\r\nexport const screenSize = {\r\n  lg: 1400,\r\n  md: 1100,\r\n  sm: 900,\r\n  xs: 650,\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { IInputFieldProps } from \"./types\";\r\nimport { inputFieldValidationRegEx } from \"constants/constants\";\r\n\r\nimport \"./styles.scss\";\r\n\r\ntype TodoClickEvent<T> = React.MouseEvent<T, MouseEvent>;\r\n\r\nconst TodoField = (props: IInputFieldProps) => {\r\n  const {\r\n    data,\r\n    onFieldChange,\r\n    handleKeyNavigation,\r\n    blankId,\r\n    active,\r\n    checkedStatus,\r\n    setCheckedStatus,\r\n  } = props;\r\n\r\n  const [fieldValue, setFieldValue] = useState<string>(data.label);\r\n  const [isDisabled, setIsDisabled] = useState<boolean>(active);\r\n  const todoRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleTodoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value.replace(inputFieldValidationRegEx, \" \");\r\n\r\n    if (value) {\r\n      onFieldChange({ name: \"label\", value: value });\r\n    } else {\r\n      setCheckedStatus(false);\r\n      onFieldChange({ name: \"done\", value: false });\r\n      onFieldChange({ name: \"label\", value: \"\" });\r\n    }\r\n    handleKeyNavigation(e, value);\r\n    setFieldValue(value);\r\n  };\r\n\r\n  const onDoneStatusChange = () => {\r\n    if (fieldValue) {\r\n      setCheckedStatus(!checkedStatus);\r\n      onFieldChange({ name: \"done\", value: !checkedStatus });\r\n    }\r\n  };\r\n\r\n  const handleTodoBlur = () => {\r\n    active && setIsDisabled(true);\r\n  };\r\n\r\n  const handleTodoFocus = () => {\r\n    setIsDisabled(false);\r\n  };\r\n\r\n  const handleEditTodo = (e: TodoClickEvent<HTMLLabelElement>) => {\r\n    e.stopPropagation();\r\n    todoRef.current.disabled = false;\r\n    todoRef.current.selectionStart = todoRef.current.value?.length;\r\n    todoRef.current.focus();\r\n    setIsDisabled(false);\r\n  };\r\n  const handleDeleteTodo = (e: TodoClickEvent<HTMLLabelElement>) => {\r\n    e.stopPropagation();\r\n    setCheckedStatus(false);\r\n    onFieldChange({ name: \"done\", value: false });\r\n    onFieldChange({ name: \"label\", value: \"\" });\r\n    setFieldValue(\"\");\r\n  };\r\n\r\n  const handleTodoClickEvent = (e: TodoClickEvent<HTMLInputElement>) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  const configClass = `${isDisabled ? \"disabled\" : \"enabled\"}`;\r\n  const todoId = `input${blankId}${data.id}`;\r\n\r\n  const canEditTodo = !checkedStatus && fieldValue.length > 0 && isDisabled;\r\n  const canDeleteTodo = checkedStatus && fieldValue.length > 0;\r\n\r\n  return (\r\n    <div className={`input-field ${configClass}`} onClick={onDoneStatusChange}>\r\n      <input\r\n        className=\"todo\"\r\n        id={todoId}\r\n        value={fieldValue}\r\n        title={fieldValue}\r\n        onChange={handleTodoChange}\r\n        onClick={handleTodoClickEvent}\r\n        onBlur={handleTodoBlur}\r\n        onFocus={handleTodoFocus}\r\n        onKeyDown={handleKeyNavigation}\r\n        disabled={isDisabled}\r\n        ref={todoRef}\r\n      />\r\n      {canEditTodo && (\r\n        <label\r\n          htmlFor={todoId}\r\n          className=\"todo-btn edit-btn\"\r\n          onClick={handleEditTodo}\r\n        >\r\n          &#9998;\r\n        </label>\r\n      )}\r\n      {canDeleteTodo && (\r\n        <label\r\n          htmlFor={todoId}\r\n          className=\"todo-btn delete-btn\"\r\n          onClick={handleDeleteTodo}\r\n        >\r\n          &#10006;\r\n        </label>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoField;\r\n","import InputField from \"../InputField/InputField\";\r\nimport { ITaskData } from \"constants/types\";\r\nimport { ITaskFieldProps } from \"./types\";\r\nimport \"./styles.scss\";\r\nimport { useState } from \"react\";\r\n\r\nconst TaskField = (props: ITaskFieldProps) => {\r\n  const {\r\n    onFieldChange,\r\n    data,\r\n    handleKeyNavigation,\r\n    listCounter,\r\n    blankId,\r\n    active,\r\n  } = props;\r\n  const [checkedStatus, setCheckedStatus] = useState<boolean>(data.done);\r\n\r\n  const onTaskChange = (task: ITaskData) => {\r\n    const updatedData = { ...data, [task.name]: task.value };\r\n    onFieldChange({ name: \"tasks\", value: updatedData });\r\n  };\r\n\r\n  const configClass = `${active ? \"active\" : \"inactive\"}\r\n  ${checkedStatus ? \"done\" : \"\"}`;\r\n\r\n  return (\r\n    <div className={`task-field ${configClass}`}>\r\n      <span className=\"list-counter\">{listCounter + 1}.</span>\r\n      <InputField\r\n        data={data}\r\n        key={data.id}\r\n        onFieldChange={onTaskChange}\r\n        handleKeyNavigation={handleKeyNavigation}\r\n        listCounter={listCounter}\r\n        blankId={blankId}\r\n        checkedStatus={checkedStatus}\r\n        setCheckedStatus={setCheckedStatus}\r\n        active={active}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskField;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nconst useActionAfterMount = (deps: any, callback: any) => {\r\n  const isMounted = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (isMounted.current) {\r\n      const timeout = setTimeout(() => {\r\n        callback();\r\n      }, 500);\r\n\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    } else {\r\n      isMounted.current = true;\r\n    }\r\n  }, [deps]);\r\n};\r\n\r\nexport default useActionAfterMount;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { inputFieldValidationRegEx } from \"constants/constants\";\r\nimport { IAdditionalPopupProps } from \"./types\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport const AdditionalPopup = (props: IAdditionalPopupProps) => {\r\n  const { data, onFieldChange } = props;\r\n\r\n  const [value, setValue] = useState(data.additionalInfo.label);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const textareaRef = useRef(null);\r\n\r\n  const handleTextAreaChange = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    const value = event.target.value.replace(inputFieldValidationRegEx, \" \");\r\n    setValue(value);\r\n\r\n    onFieldChange({\r\n      name: event.target.name,\r\n      value: { label: value },\r\n    });\r\n  };\r\n  const handleOpenPopup = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const textarea = textareaRef.current;\r\n    if (textarea && isOpen) {\r\n      textarea.focus();\r\n      textarea.selectionStart = textarea.value.length;\r\n    }\r\n  }, [textareaRef, isOpen]);\r\n\r\n  return (\r\n    <div className={`additional ${isOpen ? \"active\" : \"\"}`}>\r\n      <span\r\n        className={`additional-btn ${value.length > 3 ? \"active \" : \"\"}`}\r\n        onClick={handleOpenPopup}\r\n      >\r\n        ...\r\n      </span>\r\n      {isOpen && (\r\n        <div className=\"additional-info\" onMouseLeave={handleOpenPopup}>\r\n          <h2>Additional Info</h2>\r\n          <div className=\"content\">\r\n            <textarea\r\n              name=\"additionalInfo\"\r\n              id={`textarea-blank${data.id}`}\r\n              value={value}\r\n              onChange={handleTextAreaChange}\r\n              placeholder=\"Reminder...\"\r\n              ref={textareaRef}\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export const keyCodes = {\r\n  bottomArrow: 40,\r\n  topArrow: 38,\r\n  leftArrow: 37,\r\n  enter: 13,\r\n  delete: 8,\r\n};\r\n","import { useState } from \"react\";\r\nimport { keyCodes } from \"../components/Blank/constants\";\r\nimport { triggerInput } from \"helpers/helpers\";\r\nimport { IInputKeyNavEvent } from \"constants/types\";\r\n\r\nconst useKeyboardNavigation = (formRef: any) => {\r\n  const [nextFocusInput, setNextFocusInputAfterDelete] = useState({\r\n    index: null,\r\n  });\r\n\r\n  const handleKeyNavigation = (\r\n    event: IInputKeyNavEvent,\r\n    fieldValue: string\r\n  ) => {\r\n    const form = formRef.current;\r\n\r\n    if (form) {\r\n      // currentTarget vs target\r\n      const currentInputCarretPosition = event.currentTarget.selectionStart!;\r\n      const index = Array.prototype.indexOf.call(form, event.target);\r\n      // if form html structure will be changed it's possible to crash\r\n      const inputsStep = 1;\r\n      const prevInput = form.elements[index - inputsStep];\r\n      const nextInput = form.elements[index + inputsStep];\r\n      const currentInput = form.elements[index];\r\n\r\n      if (fieldValue === \"\") {\r\n        setNextFocusInputAfterDelete({ index });\r\n      }\r\n\r\n      const regularActions = (\r\n        input: HTMLInputElement,\r\n        cursorPos?: number,\r\n        inputForTrigger?: HTMLInputElement\r\n      ) => {\r\n        event.preventDefault();\r\n        input.disabled = false;\r\n        if (inputForTrigger) triggerInput(inputForTrigger);\r\n        if (cursorPos) input.selectionStart = cursorPos;\r\n        input.focus();\r\n      };\r\n      switch (event.keyCode) {\r\n        case keyCodes.enter:\r\n          if (nextInput) {\r\n            regularActions(nextInput, nextInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.delete:\r\n          //  if we start deleting from the last task, we go up, and if we delete the first task, we go down to the last one.\r\n\r\n          // if (nextInput) {\r\n          //   if (currentInput.value.length === 1) {\r\n          //     setIsDisabled(false);\r\n          //     regularActions(nextInput, nextInput.value?.length, currentInput);\r\n          //   }\r\n          // } else\r\n          if (currentInput.value.length === 0 && prevInput) {\r\n            regularActions(prevInput, prevInput.value?.length, currentInput);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.topArrow:\r\n          if (prevInput) {\r\n            regularActions(prevInput, prevInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.bottomArrow:\r\n          if (nextInput) {\r\n            regularActions(nextInput, nextInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.leftArrow:\r\n          if (currentInputCarretPosition === 0 && prevInput) {\r\n            regularActions(prevInput, prevInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n  return { nextFocusInput, handleKeyNavigation };\r\n};\r\n\r\nexport default useKeyboardNavigation;\r\n","import { taskDefaultModel, defaultNumberOfTasks } from \"constants/constants\";\r\nimport { IBlank, ITask } from \"constants/types\";\r\n\r\nexport const controlNumberOfTasks = (data: IBlank) => {\r\n  const tasksArrLength = data.tasks.length;\r\n\r\n  if (tasksArrLength >= defaultNumberOfTasks) {\r\n    const numberOfFilledFields = data.tasks.reduce(\r\n      (counter: number, task: ITask) => {\r\n        return task.label ? counter + 1 : counter;\r\n      },\r\n      0\r\n    );\r\n    // add new field if all is full\r\n    if (numberOfFilledFields === tasksArrLength) {\r\n      const updatedTasks = data.tasks;\r\n      const lastElementId = updatedTasks[updatedTasks.length - 1].id;\r\n\r\n      updatedTasks.push({\r\n        ...taskDefaultModel,\r\n        id: lastElementId + 1,\r\n      });\r\n      return { ...data, tasks: updatedTasks };\r\n    }\r\n    // delete empty fields\r\n    else if (numberOfFilledFields < tasksArrLength - 1) {\r\n      const filteredBlankTasks = data.tasks.filter(\r\n        (field: ITask, index: number) =>\r\n          field.label || index === tasksArrLength - 1\r\n      );\r\n      return { ...data, tasks: filteredBlankTasks };\r\n    } else {\r\n      return data;\r\n    }\r\n  }\r\n};\r\n\r\nexport const triggerInput = (inputField: any, enteredValue = \"\") => {\r\n  const input = inputField;\r\n  const lastValue = input.value;\r\n  input.value = enteredValue;\r\n\r\n  const event = new Event(\"input\", { bubbles: true });\r\n  const tracker = input._valueTracker!;\r\n\r\n  if (tracker) {\r\n    tracker.setValue(lastValue);\r\n  }\r\n\r\n  input.dispatchEvent(event);\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport TaskField from \"components/TaskField/TaskField\";\r\nimport useSaveData from \"hooks/useMount\";\r\nimport { AdditionalPopup } from \"components/AdditionalPopup/AdditionalPopup\";\r\nimport { controlNumberOfTasks } from \"helpers/helpers\";\r\nimport { IBlank, ITask, IUpdModel } from \"constants/types\";\r\nimport { IBlankProps } from \"./types\";\r\nimport useKeyboardNavigation from \"../../hooks/useKeyboardNavigation\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst Blank = (props: IBlankProps) => {\r\n  const { data, onSave } = props;\r\n\r\n  const [blankData, setBlankData] = useState<IBlank>({\r\n    tasks: data.tasks,\r\n    id: data.id,\r\n    date: data.date,\r\n    timeStatus: data.timeStatus,\r\n    additionalInfo: data.additionalInfo,\r\n  });\r\n\r\n  const dayOfWeek = moment(blankData.date).format(\"dddd\");\r\n\r\n  const formRef = useRef(null);\r\n  const { nextFocusInput, handleKeyNavigation } =\r\n    useKeyboardNavigation(formRef);\r\n\r\n  const configData = (model: IUpdModel) => {\r\n    if (model.name === \"tasks\") {\r\n      const updatedTasks = blankData.tasks.map((task: ITask) => {\r\n        return task.id === model.value.id ? model.value : task;\r\n      });\r\n\r\n      setBlankData((prevData) => {\r\n        const copyData = { ...prevData, tasks: updatedTasks };\r\n        const updatedData = controlNumberOfTasks(copyData);\r\n        return updatedData;\r\n      });\r\n    } else {\r\n      setBlankData((prevData) => {\r\n        return { ...prevData, [model.name]: model.value };\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (nextFocusInput.index !== null) {\r\n      formRef.current.elements[nextFocusInput.index].focus();\r\n    }\r\n  }, [nextFocusInput]);\r\n\r\n  useEffect(() => {\r\n    const initialFocus = () => {\r\n      const todayBlank = blankData.timeStatus === \"present\";\r\n      if (todayBlank && formRef) {\r\n        const form = formRef.current;\r\n        const firstInput = form.elements[0];\r\n        const lastInput = form.elements[form.elements.length - 1];\r\n\r\n        if (!firstInput.value) {\r\n          firstInput.focus();\r\n        } else {\r\n          lastInput.focus();\r\n        }\r\n      }\r\n    };\r\n    initialFocus();\r\n  }, []);\r\n\r\n  useSaveData(blankData, () => onSave(blankData));\r\n  return (\r\n    <div className={`blank ${blankData.timeStatus}`}>\r\n      <h2 className=\"week-day\">{dayOfWeek}</h2>\r\n      <p className=\"date\">{blankData.date}</p>\r\n\r\n      <AdditionalPopup data={blankData} onFieldChange={configData} />\r\n\r\n      <form className=\"fields-list scroll\" ref={formRef}>\r\n        {blankData.tasks.map((task, index) => {\r\n          return (\r\n            <TaskField\r\n              data={task}\r\n              key={index}\r\n              listCounter={index}\r\n              blankId={blankData.id}\r\n              onFieldChange={configData}\r\n              handleKeyNavigation={handleKeyNavigation}\r\n              active={index !== blankData.tasks.length - 1}\r\n            />\r\n          );\r\n        })}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blank;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst getWindowDimensions = () => {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return { width, height };\r\n};\r\n\r\nconst useWindowDimensions = () => {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowDimensions(getWindowDimensions());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n};\r\n\r\nexport default useWindowDimensions;\r\n","export const desktopSettings = { slidesPerView: 5 };\r\nexport const mobileSettings = {\r\n  slidesPerView: 1.3,\r\n  centeredSlides: true,\r\n  spaceBetween: 30,\r\n};\r\nexport const nextBtnClass = \"btnNextSlide\";\r\nexport const prevBtnClass = \"btnPrevSlide\";\r\n","import { useEffect, useState } from \"react\";\r\nimport Blank from \"../Blank/Blank\";\r\nimport useWindowDimensions from \"hooks/useWindowDimensions\";\r\nimport { screenSize } from \"constants/constants\";\r\nimport {\r\n  desktopSettings,\r\n  mobileSettings,\r\n  nextBtnClass,\r\n  prevBtnClass,\r\n} from \"./constants\";\r\n\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport SwiperCore, { Navigation } from \"swiper\";\r\nimport \"swiper/components/navigation/navigation.min.css\";\r\nimport \"swiper/swiper.scss\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nSwiperCore.use([Navigation]);\r\n\r\nconst CarouselComponent = (props) => {\r\n  const { todaySlideIndex } = props;\r\n  const [swiperData, setSwiperData] = useState({\r\n    activeIndex: null,\r\n    swiper: null,\r\n  });\r\n\r\n  const { width } = useWindowDimensions();\r\n  const initSettings = width < screenSize.xs ? mobileSettings : desktopSettings;\r\n  const [settings, setSettings] = useState(initSettings);\r\n\r\n  const onSwiper = (swiper) => {\r\n    console.log(\"onSwiper\");\r\n    const initFocusSlide =\r\n      width < screenSize.xs ? todaySlideIndex : todaySlideIndex - 1;\r\n    swiper.slideTo(initFocusSlide, 0);\r\n  };\r\n  const navToHome = () => {\r\n    swiperData?.swiper.slideTo(todaySlideIndex - 1, 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (width < screenSize.xs) {\r\n      setSettings(mobileSettings);\r\n    } else if (width < screenSize.sm) {\r\n      setSettings({\r\n        slidesPerView: 2.5,\r\n        centeredSlides: true,\r\n      });\r\n    } else if (width < screenSize.md) {\r\n      setSettings({ slidesPerView: 4 });\r\n    } else if (width < screenSize.lg) {\r\n      setSettings({ slidesPerView: 4 });\r\n    } else {\r\n      setSettings(desktopSettings);\r\n    }\r\n  }, [width]);\r\n\r\n  const handleSlideChange = (swiper) => {\r\n    setSwiperData({ activeIndex: swiper.activeIndex, swiper });\r\n  };\r\n\r\n  const activeSlideNotToday = swiperData.activeIndex + 1 !== todaySlideIndex;\r\n\r\n  return (\r\n    <>\r\n      <span className={`nav-btn btnSlide ${prevBtnClass}`}></span>\r\n      {activeSlideNotToday && (\r\n        <span className=\"nav-btn home-page\" onClick={navToHome}></span>\r\n      )}\r\n      <Swiper\r\n        {...settings}\r\n        onSwiper={onSwiper}\r\n        pagination={true}\r\n        navigation={{ nextEl: `.${nextBtnClass}`, prevEl: `.${prevBtnClass}` }}\r\n        onSlideChange={handleSlideChange}\r\n      >\r\n        {props.data.map((data, idx) => {\r\n          return (\r\n            <SwiperSlide key={idx} virtualIndex={idx}>\r\n              <Blank data={data} key={idx} onSave={props.onSave} />\r\n            </SwiperSlide>\r\n          );\r\n        })}\r\n      </Swiper>\r\n      <span className=\"nav-btn calendar\"></span>\r\n      <span className={`nav-btn btnSlide ${nextBtnClass}`}></span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CarouselComponent;\r\n","import { IBlank } from \"../../constants/types\";\r\nimport moment from \"moment\";\r\n\r\nexport const timeFormat = \"L\";\r\nexport const daysOfTheWeek = 7;\r\nexport const LSDataName = \"letoAppData\";\r\nexport const LSLastUpdateDateName = \"letoLastUpdateDate\";\r\n\r\nexport const updateStorage = (data: IBlank[]) => {\r\n  localStorage.setItem(LSDataName, JSON.stringify(data));\r\n};\r\n\r\nexport const currentDate = moment().format(timeFormat);\r\nexport const source = localStorage.getItem(LSDataName);\r\n","import { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport CarouselComponent from \"../Carousel/Carousel\";\r\nimport { blankDefaultModel } from \"../../constants/constants\";\r\nimport { IBlank } from \"constants/types\";\r\n\r\nimport {\r\n  timeFormat,\r\n  daysOfTheWeek,\r\n  LSLastUpdateDateName,\r\n  updateStorage,\r\n  currentDate,\r\n  source,\r\n} from \"./constants\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst Board = () => {\r\n  const [appData, setAppData] = useState(JSON.parse(source) || []);\r\n\r\n  const configTimeStatus = (newModel: IBlank, date: string) => {\r\n    const isDayInPast = moment(date).isBefore(currentDate);\r\n    const isDayInFuture = moment(date).isAfter(currentDate);\r\n    const isDayInPresent = moment(date).isSame(currentDate);\r\n    if (isDayInPast) newModel.timeStatus = \"past\";\r\n    else if (isDayInFuture) newModel.timeStatus = \"future\";\r\n    else if (isDayInPresent) {\r\n      newModel.timeStatus = \"present\";\r\n    }\r\n    return newModel;\r\n  };\r\n\r\n  const createBlanksByCount = (count: number, date?: string) => {\r\n    const blanksArr = [];\r\n    const isInitialApp = !date;\r\n    for (let i = isInitialApp ? -1 : 1; i <= count; i++) {\r\n      const nextDay: string = moment(date).add(i, \"days\").format(timeFormat);\r\n      const index = appData.length - 1 + i;\r\n      blanksArr.push(createNewBlank(nextDay, index));\r\n    }\r\n    return blanksArr;\r\n  };\r\n\r\n  const createNewBlank = (date: string, id: number) => {\r\n    const blank = { ...blankDefaultModel, date: date, id: id };\r\n    return configTimeStatus(blank, date);\r\n  };\r\n\r\n  const addNewBlanks = (data: IBlank[] | IBlank) => {\r\n    let updatedAppData = [];\r\n\r\n    if (Array.isArray(data)) {\r\n      updatedAppData = appData.concat(data);\r\n    } else {\r\n      updatedAppData.push(data);\r\n    }\r\n\r\n    setAppData(updatedAppData);\r\n    updateStorage(updatedAppData);\r\n  };\r\n\r\n  const onSave = (model: IBlank) => {\r\n    const updatedAppData = appData.map((blank: IBlank) => {\r\n      return blank.id === model.id ? model : blank;\r\n    });\r\n\r\n    setAppData(updatedAppData);\r\n    updateStorage(updatedAppData);\r\n  };\r\n\r\n  const onSlideEnded = () => {\r\n    const lastSlideDate = appData[appData.length - 1].date;\r\n    addNewBlanks(createBlanksByCount(daysOfTheWeek, lastSlideDate));\r\n  };\r\n\r\n  const todaySlideIndex = appData.findIndex((item: IBlank) =>\r\n    moment(item.date).isSame(currentDate)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const firstInitialApp = () => {\r\n      if (appData.length <= daysOfTheWeek) {\r\n        addNewBlanks(createBlanksByCount(daysOfTheWeek));\r\n      }\r\n    };\r\n    const everydayUpdateApp = (data: IBlank[]) => {\r\n      const lastUpdateDateSource = localStorage.getItem(LSLastUpdateDateName);\r\n      const lastUpdateDate = JSON.parse(lastUpdateDateSource);\r\n      const lastUpdateIsToday = moment(lastUpdateDate).isSame(currentDate);\r\n\r\n      if (!lastUpdateIsToday) {\r\n        const updatedAppData = data.map((item: IBlank) => {\r\n          return configTimeStatus(item, item.date);\r\n        });\r\n        updateStorage(updatedAppData);\r\n        setAppData(updatedAppData);\r\n        localStorage.setItem(LSLastUpdateDateName, JSON.stringify(currentDate));\r\n      }\r\n    };\r\n    everydayUpdateApp(appData);\r\n    firstInitialApp();\r\n  }, []);\r\n\r\n  // custom live pagination, month and week navigation in v2\r\n  const showPrevBlanks = () => {};\r\n  const showNextBlnks = () => {};\r\n  const navigateToDate = () => {};\r\n  const exportToExcel = () => {};\r\n\r\n  return (\r\n    <>\r\n      <div className=\"board-wrapper\">\r\n        <div className=\"container\">\r\n          <div className=\"board\">\r\n            <CarouselComponent\r\n              data={appData}\r\n              onSave={onSave}\r\n              onSlideEnded={onSlideEnded}\r\n              slidesCount={appData.length}\r\n              todaySlideIndex={todaySlideIndex}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nimport \"./styles.scss\";\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header-wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <h1 className=\"head-title\">LETO</h1>\r\n          <div className=\"account\">Ingvar</div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import \"./styles.scss\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer-wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"footer\"></div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import \"./App.scss\";\r\nimport Board from \"components/Board/Board\";\r\nimport Header from \"components/Header/Header\";\r\nimport Footer from \"components/Footer/Footer\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"LETO\">\r\n      <Header />\r\n      <Board />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}