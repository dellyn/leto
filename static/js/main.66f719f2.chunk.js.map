{"version":3,"sources":["helpers/useMount.tsx","constants/constants.ts","components/InputField/InputField.tsx","components/TaskField/TaskField.tsx","components/AdditionalPopup/AdditionalPopup.tsx","components/Blank/Blank.tsx","helpers/helpers.ts","helpers/useWindowDimensions.tsx","components/Carousel/Carousel.jsx","components/Board/constants.ts","components/Board/Board.tsx","App.js","index.jsx"],"names":["useActionAfterMount","deps","callback","isMounted","useRef","useEffect","current","timeout","setTimeout","clearTimeout","inputFieldValidationRegEx","taskDefaultModel","id","value","label","done","flag","blankDefaultModel","date","tasks","Array","keys","map","timeStatus","additionalInfo","screenSize","InputField","props","data","onFieldChange","listCounter","handleKeyNavigation","blankId","useState","fieldValue","setFieldValue","checkedStatus","setCheckedStatus","className","name","onChange","e","target","replace","onKeyDown","title","type","checked","htmlFor","TaskField","task","updatedData","AdditionalPopup","setValue","isOpen","setIsOpen","textareaRef","handleOpenPopup","textarea","focus","selectionStart","length","onClick","onMouseLeave","event","placeholder","ref","Blank","onSave","blankData","setBlankData","dayOfWeek","moment","format","formRef","index","nextFocusInput","setNextFocusInputAfterDelete","configData","model","updatedTasks","prevData","tasksArrLength","numberOfFilledFields","reduce","counter","lastElementId","push","filteredBlankTasks","filter","field","controlNumberOfTasks","taskFieldsKeyboardNavigation","form","currentInputCarretPosition","currentTarget","prototype","indexOf","call","prevInput","elements","nextInput","currentInput","setCurrentCarretPosition","el","selectionEnd","keyCode","preventDefault","inputField","enteredValue","input","lastValue","Event","bubbles","tracker","_valueTracker","dispatchEvent","triggerInput","firstInput","initialFocus","useSaveData","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","SwiperCore","use","Pagination","slidesPerView","nextBtnClass","prevBtnClass","Navigation","CarouselComponent","setSwiper","windowSize","console","log","centeredSlides","spaceBetween","pagination","navigation","nextEl","prevEl","onReachEnd","onSlideEnded","onSwiper","swiper","slideTo","todaySlideIndex","idx","virtualIndex","LSDataName","LSLastUpdateDateName","updateStorage","localStorage","setItem","JSON","stringify","currentDate","source","getItem","Board","parse","appData","setAppData","configTimeStatus","newModel","isDayInPast","isBefore","isDayInFuture","isAfter","createBlanksByCount","count","blanksArr","i","nextDay","add","createNewBlank","blank","addNewBlanks","updatedAppData","isArray","concat","findIndex","item","isSame","lastUpdateDateSource","lastUpdateDate","everydayUpdateApp","lastSlideDate","slidesCount","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66f719f2.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\r\n\r\nconst useActionAfterMount = (deps: any, callback: any) => {\r\n  const isMounted = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (isMounted.current) {\r\n      const timeout = setTimeout(() => {\r\n        callback();\r\n      }, 500);\r\n\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    } else {\r\n      isMounted.current = true;\r\n    }\r\n  }, [callback, deps]);\r\n};\r\n\r\nexport default useActionAfterMount;\r\n","import { IBlank, ITask } from \"./types\";\r\n\r\nexport const inputFieldValidationRegEx = /\\s\\s+/g;\r\nexport const defaultNumberOfTasks = 1;\r\n\r\nexport const taskDefaultModel: ITask = {\r\n  id: null,\r\n  value: null,\r\n  label: \"\",\r\n  done: false,\r\n  flag: \"\",\r\n};\r\n\r\nexport const defaultTasksField = (): ITask[] => {\r\n  const fieldsNumber = [...new Array(defaultNumberOfTasks).keys()];\r\n  return fieldsNumber.map((id) => {\r\n    const task = { ...taskDefaultModel, id };\r\n    return task;\r\n  });\r\n};\r\n\r\nexport const blankDefaultModel: IBlank = {\r\n  date: null,\r\n  id: null,\r\n  tasks: defaultTasksField(),\r\n  timeStatus: null,\r\n  additionalInfo: {\r\n    label: \"\",\r\n  },\r\n};\r\n\r\nexport const screenSize = {\r\n  lg: 1400,\r\n  md: 1100,\r\n  sm: 900,\r\n  xs: 600,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { IInputFieldProps } from \"./types\";\r\nimport { inputFieldValidationRegEx } from \"constants/constants\";\r\n\r\nimport \"./styles.scss\";\r\nimport \"./checkbox.scss\";\r\n\r\nconst InputField = (props: IInputFieldProps) => {\r\n  const { data, onFieldChange, listCounter, handleKeyNavigation, blankId } =\r\n    props;\r\n\r\n  const [fieldValue, setFieldValue] = useState(data.label);\r\n  const [checkedStatus, setCheckedStatus] = useState<boolean>(data.done);\r\n\r\n  const onTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value.replace(inputFieldValidationRegEx, \" \");\r\n\r\n    if (value) {\r\n      onFieldChange({ name: \"label\", value: value });\r\n    } else {\r\n      setCheckedStatus(false);\r\n      onFieldChange({ name: \"done\", value: false });\r\n      onFieldChange({ name: \"label\", value: \"\" });\r\n    }\r\n    handleKeyNavigation(e, value);\r\n    setFieldValue(value);\r\n  };\r\n\r\n  const onDoneStatusChange = () => {\r\n    if (fieldValue) {\r\n      setCheckedStatus(!checkedStatus);\r\n      onFieldChange({ name: \"done\", value: !checkedStatus });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`input-field ${checkedStatus ? \"done\" : \"\"}`}>\r\n      <span className=\"list-counter\">{listCounter + 1}.</span>\r\n      <input\r\n        className=\"text\"\r\n        name=\"taskField\"\r\n        value={fieldValue}\r\n        onChange={onTextChange}\r\n        onKeyDown={handleKeyNavigation}\r\n        title={fieldValue}\r\n      />\r\n      <div className=\"custom-checkbox\">\r\n        <input\r\n          id={`checkboxId${blankId}${data.id}`}\r\n          type=\"checkbox\"\r\n          onChange={onDoneStatusChange}\r\n          checked={checkedStatus}\r\n        />\r\n        <label htmlFor={`checkboxId${blankId}${data.id}`}>\r\n          <span></span>\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","import InputField from \"../InputField/InputField\";\r\nimport { ITaskData } from \"constants/types\";\r\nimport { ITaskFieldProps } from \"./types\";\r\nconst TaskField = (props: ITaskFieldProps) => {\r\n  const { onFieldChange, data, handleKeyNavigation, listCounter, blankId } =\r\n    props;\r\n\r\n  const onTaskChange = (task: ITaskData) => {\r\n    const updatedData = { ...data, [task.name]: task.value };\r\n    onFieldChange({ name: \"tasks\", value: updatedData });\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-field\">\r\n      <InputField\r\n        data={data}\r\n        key={data.id}\r\n        onFieldChange={onTaskChange}\r\n        handleKeyNavigation={handleKeyNavigation}\r\n        listCounter={listCounter}\r\n        blankId={blankId}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskField;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { inputFieldValidationRegEx } from \"constants/constants\";\r\nimport \"./styles.scss\";\r\n\r\nexport const AdditionalPopup = (props: any) => {\r\n  const { data, onFieldChange } = props;\r\n\r\n  const [value, setValue] = useState(data.additionalInfo.label);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const textareaRef = useRef(null);\r\n\r\n  const handleTextAreaChange = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    const value = event.target.value.replace(inputFieldValidationRegEx, \" \");\r\n    setValue(value);\r\n\r\n    onFieldChange({\r\n      name: event.target.name,\r\n      value: { label: value },\r\n    });\r\n  };\r\n  const handleOpenPopup = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const textarea = textareaRef.current;\r\n    if (textarea && isOpen) {\r\n      textarea.focus();\r\n      textarea.selectionStart = textarea.value.length;\r\n    }\r\n  }, [textareaRef, isOpen]);\r\n\r\n  return (\r\n    <div className={`additional ${isOpen ? \"active\" : \"\"}`}>\r\n      <span\r\n        className={`additional-btn ${value.length > 3 ? \"active \" : \"\"}`}\r\n        onClick={handleOpenPopup}\r\n      >\r\n        ...\r\n      </span>\r\n      <div className=\"additional-info\" onMouseLeave={handleOpenPopup}>\r\n        <h2>Additional Info</h2>\r\n        <div className=\"content\">\r\n          <textarea\r\n            name=\"additionalInfo\"\r\n            id={`textarea-blank${data.id}`}\r\n            value={value}\r\n            onChange={handleTextAreaChange}\r\n            placeholder=\"Reminder...\"\r\n            ref={textareaRef}\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n} from \"react\";\r\nimport moment from \"moment\";\r\nimport useSaveData from \"../../helpers/useMount\";\r\nimport { controlNumberOfTasks } from \"helpers/helpers\";\r\nimport TaskField from \"components/TaskField/TaskField\";\r\nimport { IBlank, ITask, IUpdModel, IInputKeyNavEvent } from \"constants/types\";\r\nimport { IBlankProps } from \"./types\";\r\nimport { triggerInput } from \"helpers/helpers\";\r\nimport { AdditionalPopup } from \"../AdditionalPopup/AdditionalPopup\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst bottomArrowCode = 40;\r\nconst topArrowCode = 38;\r\nconst leftArrowCode = 37;\r\nconst enterCode = 13;\r\nconst deleteCode = 8;\r\n\r\nconst Blank = (props: IBlankProps) => {\r\n  const { data, onSave } = props;\r\n\r\n  const [blankData, setBlankData] = useState<IBlank>({\r\n    tasks: data.tasks,\r\n    id: data.id,\r\n    date: data.date,\r\n    timeStatus: data.timeStatus,\r\n    additionalInfo: data.additionalInfo,\r\n  });\r\n  const dayOfWeek = moment(blankData.date).format(\"dddd\");\r\n\r\n  const formRef = useRef(null);\r\n  const [nextFocusInput, setNextFocusInputAfterDelete] = useState({\r\n    index: null,\r\n  });\r\n\r\n  const configData = (model: IUpdModel) => {\r\n    if (model.name === \"tasks\") {\r\n      const updatedTasks = blankData.tasks.map((task: ITask) => {\r\n        return task.id === model.value.id ? model.value : task;\r\n      });\r\n\r\n      setBlankData((prevData) => {\r\n        const copyData = { ...prevData, tasks: updatedTasks };\r\n        const updatedData = controlNumberOfTasks(copyData);\r\n        return updatedData;\r\n      });\r\n    } else {\r\n      setBlankData((prevData) => {\r\n        return { ...prevData, [model.name]: model.value };\r\n      });\r\n    }\r\n  };\r\n\r\n  const taskFieldsKeyboardNavigation = (\r\n    event: IInputKeyNavEvent,\r\n    fieldValue: string\r\n  ) => {\r\n    const form = formRef.current;\r\n\r\n    if (form) {\r\n      // currentTarget vs target\r\n      const currentInputCarretPosition = event.currentTarget.selectionStart!;\r\n      const index = Array.prototype.indexOf.call(form, event.target);\r\n      // if form html structure will be changed it's possible to crash\r\n      const inputsStep = 2;\r\n      const prevInput = form.elements[index - inputsStep];\r\n      const nextInput = form.elements[index + inputsStep];\r\n      const currentInput = form.elements[index];\r\n\r\n      if (fieldValue === \"\") {\r\n        setNextFocusInputAfterDelete({ index });\r\n      }\r\n\r\n      const setCurrentCarretPosition = (el: HTMLInputElement) => {\r\n        el.selectionEnd = el.selectionStart = currentInputCarretPosition;\r\n      };\r\n\r\n      switch (event.keyCode) {\r\n        case enterCode:\r\n          event.preventDefault();\r\n\r\n          if (nextInput) {\r\n            setCurrentCarretPosition(nextInput);\r\n            nextInput.focus();\r\n          }\r\n\r\n          break;\r\n        case deleteCode:\r\n          //  why used uncotrolled acrtion? - currentInput\r\n          if (currentInput.value.length === 0 && prevInput) {\r\n            event.preventDefault();\r\n            triggerInput(currentInput);\r\n            prevInput.focus();\r\n          }\r\n\r\n          break;\r\n        case topArrowCode:\r\n          if (prevInput) {\r\n            event.preventDefault();\r\n            setCurrentCarretPosition(prevInput);\r\n            prevInput.focus();\r\n          }\r\n\r\n          break;\r\n        case bottomArrowCode:\r\n          if (nextInput) {\r\n            event.preventDefault();\r\n            setCurrentCarretPosition(nextInput);\r\n            nextInput.focus();\r\n          }\r\n\r\n          break;\r\n        case leftArrowCode:\r\n          if (currentInputCarretPosition === 0 && prevInput) {\r\n            event.preventDefault();\r\n            prevInput.selectionStart = 999;\r\n            prevInput.focus();\r\n          }\r\n\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (nextFocusInput.index !== null) {\r\n      formRef.current.elements[nextFocusInput.index].focus();\r\n    }\r\n  }, [nextFocusInput]);\r\n\r\n  useEffect(() => {\r\n    const initialFocus = () => {\r\n      const firstInput = formRef.current.elements[0];\r\n      const todayBlank = formRef && blankData.timeStatus === \"present\";\r\n      if (todayBlank && !firstInput.value) {\r\n        firstInput.focus();\r\n      }\r\n    };\r\n    initialFocus();\r\n  }, [blankData.timeStatus]);\r\n\r\n  useSaveData(blankData, () => onSave(blankData));\r\n\r\n  return (\r\n    <div className={`blank ${blankData.timeStatus}`}>\r\n      <h2 className=\"week-day\">{dayOfWeek}</h2>\r\n      <p className=\"date\">{blankData.date}</p>\r\n\r\n      <AdditionalPopup data={blankData} onFieldChange={configData} />\r\n\r\n      <form className=\"fields-list scroll\" ref={formRef}>\r\n        {blankData.tasks.map((task, index) => {\r\n          return (\r\n            <TaskField\r\n              data={task}\r\n              key={index}\r\n              listCounter={index}\r\n              blankId={blankData.id}\r\n              onFieldChange={configData}\r\n              handleKeyNavigation={taskFieldsKeyboardNavigation}\r\n            />\r\n          );\r\n        })}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blank;\r\n","import { taskDefaultModel, defaultNumberOfTasks } from \"constants/constants\";\r\nimport { IBlank, ITask } from \"constants/types\";\r\n\r\nexport const controlNumberOfTasks = (data: IBlank) => {\r\n  const tasksArrLength = data.tasks.length;\r\n\r\n  if (tasksArrLength >= defaultNumberOfTasks) {\r\n    const numberOfFilledFields = data.tasks.reduce(\r\n      (counter: number, task: ITask) => {\r\n        return task.label ? counter + 1 : counter;\r\n      },\r\n      0\r\n    );\r\n    // add new field if all is full\r\n    if (numberOfFilledFields === tasksArrLength) {\r\n      const updatedTasks = data.tasks;\r\n      const lastElementId = updatedTasks[updatedTasks.length - 1].id;\r\n\r\n      updatedTasks.push({\r\n        ...taskDefaultModel,\r\n        id: lastElementId + 1,\r\n      });\r\n      return { ...data, tasks: updatedTasks };\r\n    }\r\n    // delete empty fields\r\n    else if (numberOfFilledFields < tasksArrLength - 1) {\r\n      const filteredBlankTasks = data.tasks.filter(\r\n        (field: ITask, index: number) =>\r\n          field.label || index === tasksArrLength - 1\r\n      );\r\n      return { ...data, tasks: filteredBlankTasks };\r\n    } else {\r\n      return data;\r\n    }\r\n  }\r\n};\r\n\r\nexport const triggerInput = (inputField: any, enteredValue = \"\") => {\r\n  const input = inputField;\r\n  const lastValue = input.value;\r\n  input.value = enteredValue;\r\n\r\n  const event = new Event(\"input\", { bubbles: true });\r\n  const tracker = input._valueTracker;\r\n\r\n  if (tracker) {\r\n    tracker.setValue(lastValue);\r\n  }\r\n\r\n  input.dispatchEvent(event);\r\n};\r\n\r\nexport const controlViewSize = () => {};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n\r\n  return {\r\n    width,\r\n    height,\r\n  };\r\n}\r\n\r\nconst useWindowDimensions = () => {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n};\r\n\r\nexport default useWindowDimensions;\r\n","import Blank from \"../Blank/Blank\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\n\r\nimport \"swiper/components/navigation/navigation.min.css\";\r\nimport \"swiper/swiper.scss\";\r\nimport \"./Carousel.scss\";\r\nimport useWindowDimensions from \"helpers/useWindowDimensions\";\r\nimport { useEffect, useState } from \"react\";\r\nimport SwiperCore, { Navigation, Pagination } from \"swiper/core\";\r\nimport { screenSize } from \"constants/constants\";\r\n\r\n// install Swiper modules\r\nSwiperCore.use([Pagination]);\r\nlet slidesPerView = 5;\r\nlet spaceBeetwen = 0;\r\nconst nextBtnClass = \"btnNextSlide\";\r\nconst prevBtnClass = \"btnPrevSlide\";\r\nSwiperCore.use([Navigation]);\r\n\r\nconst CarouselComponent = (props) => {\r\n  const [swiper, setSwiper] = useState(null);\r\n  const windowSize = useWindowDimensions();\r\n  const handleChange = () => {\r\n    props.onSlideEnded();\r\n  };\r\n\r\n  const onSwiper = (swiper) => {\r\n    console.log(\"swiper\");\r\n    swiper.slideTo(props.todaySlideIndex, 0);\r\n    setSwiper(swiper);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (windowSize.width <= screenSize.xs) {\r\n      slidesPerView = 1;\r\n      // swiper?.slideTo(props.todaySlideIndex, 0);\r\n    } else if (windowSize.width <= screenSize.sm) {\r\n      slidesPerView = 2;\r\n    } else if (windowSize.width <= screenSize.md) {\r\n      slidesPerView = 3;\r\n    } else if (windowSize.width <= screenSize.lg) {\r\n      slidesPerView = 4;\r\n    }\r\n  }, []);\r\n  console.log(props);\r\n  return (\r\n    <>\r\n      <span className={`swiper-button-prev ${prevBtnClass}`}></span>\r\n\r\n      <Swiper\r\n        slidesPerView={slidesPerView}\r\n        centeredSlides={true}\r\n        spaceBetween={spaceBeetwen}\r\n        pagination={true}\r\n        navigation={{ nextEl: `.${nextBtnClass}`, prevEl: `.${prevBtnClass}` }}\r\n        onReachEnd={handleChange}\r\n        onSwiper={onSwiper}\r\n      >\r\n        {props.data.map((data, idx) => {\r\n          return (\r\n            <SwiperSlide key={idx} virtualIndex={idx}>\r\n              <Blank data={data} key={idx} onSave={props.onSave} />\r\n            </SwiperSlide>\r\n          );\r\n        })}\r\n      </Swiper>\r\n      <span className={`swiper-button-next ${nextBtnClass}`}></span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CarouselComponent;\r\n","import { IBlank } from \"../../constants/types\";\r\nimport moment from \"moment\";\r\n\r\nexport const timeFormat = \"L\";\r\nexport const daysOfTheWeek = 7;\r\nexport const LSDataName = \"letoAppData\";\r\nexport const LSLastUpdateDateName = \"letoLastUpdateDate\";\r\n\r\nexport const updateStorage = (data: IBlank[]) => {\r\n  localStorage.setItem(LSDataName, JSON.stringify(data));\r\n};\r\n\r\nexport const currentDate = moment().format(timeFormat);\r\nexport const source = localStorage.getItem(LSDataName);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport CarouselComponent from \"../Carousel/Carousel\";\r\nimport { blankDefaultModel } from \"../../constants/constants\";\r\nimport { IBlank } from \"constants/types\";\r\n\r\nimport {\r\n  timeFormat,\r\n  daysOfTheWeek,\r\n  LSLastUpdateDateName,\r\n  updateStorage,\r\n  currentDate,\r\n  source,\r\n} from \"./constants\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst Board = () => {\r\n  const [appData, setAppData] = useState(JSON.parse(source) || []);\r\n\r\n  const configTimeStatus = (newModel: IBlank, date: string) => {\r\n    const isDayInPast = moment(date).isBefore(currentDate);\r\n    const isDayInFuture = moment(date).isAfter(currentDate);\r\n    if (isDayInPast) newModel.timeStatus = \"past\";\r\n    else if (isDayInFuture) newModel.timeStatus = \"future\";\r\n    else newModel.timeStatus = \"present\";\r\n\r\n    return newModel;\r\n  };\r\n\r\n  const createBlanksByCount = (count: number, date?: string) => {\r\n    const blanksArr = [];\r\n    const isInitialApp = !date;\r\n    for (let i = isInitialApp ? -1 : 1; i <= count; i++) {\r\n      const nextDay: string = moment(date).add(i, \"days\").format(timeFormat);\r\n      const index = appData.length - 1 + i;\r\n      blanksArr.push(createNewBlank(nextDay, index));\r\n    }\r\n    return blanksArr;\r\n  };\r\n\r\n  const createNewBlank = (date: string, id: number) => {\r\n    const blank = { ...blankDefaultModel, date: date, id: id };\r\n    return configTimeStatus(blank, date);\r\n  };\r\n\r\n  const addNewBlanks = (data: IBlank[] | IBlank) => {\r\n    let updatedAppData = [];\r\n\r\n    if (Array.isArray(data)) {\r\n      updatedAppData = appData.concat(data);\r\n    } else {\r\n      updatedAppData.push(data);\r\n    }\r\n\r\n    setAppData(updatedAppData);\r\n    updateStorage(updatedAppData);\r\n  };\r\n\r\n  const onSave = (model: IBlank) => {\r\n    const updatedAppData = appData.map((blank: IBlank) => {\r\n      return blank.id === model.id ? model : blank;\r\n    });\r\n\r\n    setAppData(updatedAppData);\r\n    updateStorage(updatedAppData);\r\n  };\r\n\r\n  const onSlideEnded = () => {\r\n    const lastSlideDate = appData[appData.length - 1].date;\r\n    addNewBlanks(createBlanksByCount(daysOfTheWeek, lastSlideDate));\r\n  };\r\n\r\n  const todaySlideIndex = appData.findIndex((item: IBlank) =>\r\n    moment(item.date).isSame(currentDate)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const firstInitialApp = () => {\r\n      if (appData.length < daysOfTheWeek) {\r\n        addNewBlanks(createBlanksByCount(daysOfTheWeek));\r\n      }\r\n    };\r\n    const everydayUpdateApp = (data: IBlank[]) => {\r\n      const lastUpdateDateSource = localStorage.getItem(LSLastUpdateDateName);\r\n      const lastUpdateDate = JSON.parse(lastUpdateDateSource);\r\n      const lastUpdateIsToday = moment(lastUpdateDate).isSame(currentDate);\r\n\r\n      if (!lastUpdateIsToday) {\r\n        const updatedAppData = data.map((item: IBlank) => {\r\n          return configTimeStatus(item, item.date);\r\n        });\r\n        updateStorage(updatedAppData);\r\n        localStorage.setItem(LSLastUpdateDateName, JSON.stringify(currentDate));\r\n      }\r\n    };\r\n    firstInitialApp();\r\n    everydayUpdateApp(appData);\r\n  }, []);\r\n\r\n  // custom live pagination, month and week navigation in v2\r\n  const showPrevBlanks = () => {};\r\n  const showNextBlnks = () => {};\r\n  const navigateToDate = () => {};\r\n  const exportToExcel = () => {};\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"head-title\">LETO</h1>\r\n      <div className=\"board\">\r\n        <CarouselComponent\r\n          data={appData}\r\n          onSave={onSave}\r\n          onSlideEnded={onSlideEnded}\r\n          slidesCount={appData.length}\r\n          todaySlideIndex={todaySlideIndex}\r\n          handleKeyNavigation={() => {}}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import \"./App.scss\";\r\nimport Board from \"components/Board/Board\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"LETO\">\r\n      <div className=\"container\">\r\n        <Board />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}