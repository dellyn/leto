{"version":3,"sources":["constants/constants.ts","components/InputField/InputField.tsx","components/TaskField/TaskField.tsx","hooks/useMount.tsx","components/AdditionalPopup/AdditionalPopup.tsx","components/Blank/constants.ts","hooks/useKeyboardNavigation.tsx","helpers/helpers.ts","components/Blank/Blank.tsx","hooks/useWindowDimensions.tsx","components/Carousel/constants.ts","components/Carousel/Carousel.jsx","components/Board/constants.ts","components/Board/Board.tsx","context/SettingsContext.tsx","components/Theme/ThemeSwitcher.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","constants/settings.ts","App.tsx","index.jsx"],"names":["inputFieldValidationRegEx","taskDefaultModel","id","value","label","done","flag","blankDefaultModel","date","tasks","Array","keys","map","timeStatus","additionalInfo","screenSize","TodoField","props","data","onFieldChange","handleKeyNavigation","blankId","active","checkedStatus","setCheckedStatus","isDisabled","setIsDisabled","useState","fieldValue","setFieldValue","todoRef","useRef","todoId","canEditTodo","length","canDeleteTodo","className","onClick","name","title","onChange","e","target","replace","stopPropagation","onBlur","onFocus","onKeyDown","disabled","ref","htmlFor","current","selectionStart","focus","TaskField","listCounter","configClasses","InputField","task","updatedData","useActionAfterMount","deps","callback","isMounted","useEffect","timeout","setTimeout","clearTimeout","AdditionalPopup","setValue","isOpen","setIsOpen","textareaRef","handleOpenPopup","textarea","onMouseLeave","event","placeholder","keyCodes","useKeyboardNavigation","formRef","index","nextFocusInput","setNextFocusInputAfterDelete","form","currentInputCarretPosition","currentTarget","prototype","indexOf","call","prevInput","elements","nextInput","currentInput","regularActions","input","cursorPos","inputForTrigger","preventDefault","inputField","enteredValue","lastValue","Event","bubbles","tracker","_valueTracker","dispatchEvent","triggerInput","keyCode","Blank","onSave","blankData","setBlankData","dayOfWeek","moment","format","configData","model","updatedTasks","prevData","tasksArrLength","numberOfFilledFields","reduce","counter","lastElementId","push","filteredBlankTasks","filter","field","controlNumberOfTasks","firstInput","lastInput","initialFocus","useSaveData","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","desktopSettings","slidesPerView","mobileSettings","centeredSlides","spaceBetween","nextBtnClass","prevBtnClass","SwiperCore","use","Navigation","CarouselComponent","todaySlideIndex","activeIndex","swiper","swiperData","setSwiperData","initSettings","settings","setSettings","activeSlideNotToday","slideTo","onSwiper","initFocusSlide","pagination","navigation","nextEl","prevEl","onSlideChange","idx","virtualIndex","LSDataName","LSLastUpdateDateName","updateStorage","localStorage","setItem","JSON","stringify","currentDate","source","getItem","Board","parse","appData","setAppData","configTimeStatus","newModel","isDayInPast","isBefore","isDayInFuture","isAfter","isDayInPresent","isSame","createBlanksByCount","count","blanksArr","i","nextDay","add","createNewBlank","blank","addNewBlanks","updatedAppData","isArray","concat","findIndex","item","lastUpdateDateSource","lastUpdateDate","everydayUpdateApp","Carousel","onSlideEnded","lastSlideDate","slidesCount","SettingsContext","React","createContext","setTheme","themeType","ThemeSwitcher","useContext","defaultChecked","theme","checked","setChecked","type","Header","Footer","LSSettingsName","appSettings","storageSettings","App","changeTheme","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.144104a8.chunk.js","sourcesContent":["import { IBlank, ITask } from \"./types\";\r\n\r\nexport const inputFieldValidationRegEx = /\\s\\s+/g;\r\nexport const defaultNumberOfTasks = 1;\r\n\r\nexport const taskDefaultModel: ITask = {\r\n  id: null,\r\n  value: null,\r\n  label: \"\",\r\n  done: false,\r\n  flag: \"\",\r\n};\r\n\r\nexport const defaultTasksField = (): ITask[] => {\r\n  const fieldsNumber = [...new Array(defaultNumberOfTasks).keys()];\r\n  return fieldsNumber.map((id) => {\r\n    const task = { ...taskDefaultModel, id };\r\n    return task;\r\n  });\r\n};\r\n\r\nexport const blankDefaultModel: IBlank = {\r\n  date: null,\r\n  id: null,\r\n  tasks: defaultTasksField(),\r\n  timeStatus: null,\r\n  additionalInfo: {\r\n    label: \"\",\r\n  },\r\n};\r\n\r\nexport const screenSize = {\r\n  lg: 1400,\r\n  md: 1100,\r\n  sm: 900,\r\n  xs: 650,\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { IInputFieldProps } from \"./types\";\r\nimport { inputFieldValidationRegEx } from \"constants/constants\";\r\n\r\nimport \"./styles.scss\";\r\n\r\ntype TodoClickEvent<T> = React.MouseEvent<T, MouseEvent>;\r\n\r\nconst TodoField = (props: IInputFieldProps) => {\r\n  const {\r\n    data,\r\n    onFieldChange,\r\n    handleKeyNavigation,\r\n    blankId,\r\n    active,\r\n    checkedStatus,\r\n    setCheckedStatus,\r\n    isDisabled,\r\n    setIsDisabled,\r\n  } = props;\r\n\r\n  const [fieldValue, setFieldValue] = useState<string>(data.label);\r\n  const todoRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleTodoChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value.replace(inputFieldValidationRegEx, \" \");\r\n\r\n    if (value) {\r\n      onFieldChange({ name: \"label\", value: value });\r\n    } else {\r\n      setIsDisabled(false);\r\n      onFieldChange({ name: \"done\", value: false });\r\n      onFieldChange({ name: \"label\", value: \"\" });\r\n    }\r\n    handleKeyNavigation(e, value);\r\n    setFieldValue(value);\r\n  };\r\n\r\n  const onDoneStatusChange = () => {\r\n    if (fieldValue) {\r\n      onFieldChange({ name: \"done\", value: !checkedStatus });\r\n      setCheckedStatus(!checkedStatus);\r\n    }\r\n  };\r\n\r\n  const handleTodoBlur = () => {\r\n    active && setIsDisabled(true);\r\n  };\r\n\r\n  const handleTodoFocus = () => {\r\n    setIsDisabled(false);\r\n  };\r\n\r\n  const handleEditTodo = (e: TodoClickEvent<HTMLLabelElement>) => {\r\n    e.stopPropagation();\r\n    todoRef.current.disabled = false;\r\n    todoRef.current.selectionStart = todoRef.current.value?.length;\r\n    todoRef.current.focus();\r\n    setIsDisabled(false);\r\n  };\r\n  const handleDeleteTodo = (e: TodoClickEvent<HTMLLabelElement>) => {\r\n    e.stopPropagation();\r\n    onFieldChange({ name: \"done\", value: false });\r\n    onFieldChange({ name: \"label\", value: \"\" });\r\n    setFieldValue(\"\");\r\n  };\r\n\r\n  const handleTodoClickEvent = (e: TodoClickEvent<HTMLInputElement>) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  const todoId = `input${blankId}${data.id}`;\r\n\r\n  const canEditTodo = !checkedStatus && fieldValue.length > 0 && isDisabled;\r\n  const canDeleteTodo = checkedStatus && fieldValue.length > 0;\r\n\r\n  return (\r\n    <div\r\n      className={`input-field ${isDisabled && active ? \"active\" : \"inactive\"}`}\r\n      onClick={onDoneStatusChange}\r\n    >\r\n      <input\r\n        className=\"todo\"\r\n        id={todoId}\r\n        value={fieldValue}\r\n        title={fieldValue}\r\n        onChange={handleTodoChange}\r\n        onClick={handleTodoClickEvent}\r\n        onBlur={handleTodoBlur}\r\n        onFocus={handleTodoFocus}\r\n        onKeyDown={handleKeyNavigation}\r\n        disabled={isDisabled}\r\n        ref={todoRef}\r\n      />\r\n      {canEditTodo && (\r\n        <label\r\n          htmlFor={todoId}\r\n          className=\"todo-btn edit-btn\"\r\n          onClick={handleEditTodo}\r\n        >\r\n          &#9998;\r\n        </label>\r\n      )}\r\n      {canDeleteTodo && (\r\n        <label\r\n          htmlFor={todoId}\r\n          className=\"todo-btn delete-btn\"\r\n          onClick={handleDeleteTodo}\r\n        >\r\n          &#10006;\r\n        </label>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoField;\r\n","import InputField from \"../InputField/InputField\";\r\nimport { ITaskData } from \"constants/types\";\r\nimport { ITaskFieldProps } from \"./types\";\r\nimport \"./styles.scss\";\r\nimport { useState } from \"react\";\r\n\r\nconst TaskField = (props: ITaskFieldProps) => {\r\n  const {\r\n    onFieldChange,\r\n    data,\r\n    handleKeyNavigation,\r\n    listCounter,\r\n    blankId,\r\n    active,\r\n  } = props;\r\n\r\n  const [checkedStatus, setCheckedStatus] = useState<boolean>(data.done);\r\n  const [isDisabled, setIsDisabled] = useState<boolean>(active);\r\n\r\n  const onTaskChange = (task: ITaskData) => {\r\n    const updatedData = { ...data, [task.name]: task.value };\r\n    onFieldChange({ name: \"tasks\", value: updatedData });\r\n  };\r\n\r\n  const configClasses = `${checkedStatus ? \"done\" : \"\"} ${\r\n    isDisabled ? \"disabled\" : \"enabled\"\r\n  }\r\n  `;\r\n\r\n  return (\r\n    <div className={`task-field ${configClasses}`}>\r\n      <span className=\"list-counter\">{listCounter + 1}.</span>\r\n      <InputField\r\n        data={data}\r\n        key={data.id}\r\n        onFieldChange={onTaskChange}\r\n        handleKeyNavigation={handleKeyNavigation}\r\n        listCounter={listCounter}\r\n        blankId={blankId}\r\n        checkedStatus={checkedStatus}\r\n        setCheckedStatus={setCheckedStatus}\r\n        setIsDisabled={setIsDisabled}\r\n        isDisabled={isDisabled}\r\n        active={active}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskField;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nconst useActionAfterMount = (deps: any, callback: any) => {\r\n  const isMounted = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (isMounted.current) {\r\n      const timeout = setTimeout(() => {\r\n        callback();\r\n      }, 500);\r\n\r\n      return () => {\r\n        clearTimeout(timeout);\r\n      };\r\n    } else {\r\n      isMounted.current = true;\r\n    }\r\n  }, [deps]);\r\n};\r\n\r\nexport default useActionAfterMount;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { inputFieldValidationRegEx } from \"constants/constants\";\r\nimport { IAdditionalPopupProps } from \"./types\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport const AdditionalPopup = (props: IAdditionalPopupProps) => {\r\n  const { data, onFieldChange } = props;\r\n\r\n  const [value, setValue] = useState(data.additionalInfo.label);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const textareaRef = useRef(null);\r\n\r\n  const handleTextAreaChange = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    const value = event.target.value.replace(inputFieldValidationRegEx, \" \");\r\n    setValue(value);\r\n\r\n    onFieldChange({\r\n      name: event.target.name,\r\n      value: { label: value },\r\n    });\r\n  };\r\n  const handleOpenPopup = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const textarea = textareaRef.current;\r\n    if (textarea && isOpen) {\r\n      textarea.focus();\r\n      textarea.selectionStart = textarea.value.length;\r\n    }\r\n  }, [textareaRef, isOpen]);\r\n\r\n  return (\r\n    <div className={`additional ${isOpen ? \"active\" : \"\"}`}>\r\n      <span\r\n        className={`additional-btn ${value.length > 3 ? \"active \" : \"\"}`}\r\n        onClick={handleOpenPopup}\r\n      >\r\n        &#9900;\r\n      </span>\r\n      {isOpen && (\r\n        <div className=\"additional-info\" onMouseLeave={handleOpenPopup}>\r\n          <h2>More</h2>\r\n          <div className=\"content\">\r\n            <textarea\r\n              name=\"additionalInfo\"\r\n              id={`textarea-blank${data.id}`}\r\n              value={value}\r\n              onChange={handleTextAreaChange}\r\n              placeholder=\"Reminder...\"\r\n              ref={textareaRef}\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export const keyCodes = {\r\n  bottomArrow: 40,\r\n  topArrow: 38,\r\n  leftArrow: 37,\r\n  enter: 13,\r\n  delete: 8,\r\n};\r\n","import { useState } from \"react\";\r\nimport { keyCodes } from \"../components/Blank/constants\";\r\nimport { triggerInput } from \"helpers/helpers\";\r\nimport { IInputKeyNavEvent } from \"constants/types\";\r\n\r\nconst useKeyboardNavigation = (formRef: any) => {\r\n  const [nextFocusInput, setNextFocusInputAfterDelete] = useState({\r\n    index: null,\r\n  });\r\n\r\n  const handleKeyNavigation = (\r\n    event: IInputKeyNavEvent,\r\n    fieldValue: string\r\n  ) => {\r\n    const form = formRef.current;\r\n\r\n    if (form) {\r\n      // currentTarget vs target\r\n      const currentInputCarretPosition = event.currentTarget.selectionStart!;\r\n      const index = Array.prototype.indexOf.call(form, event.target);\r\n      // if form html structure will be changed it's possible to crash\r\n      const inputsStep = 1;\r\n      const prevInput = form.elements[index - inputsStep];\r\n      const nextInput = form.elements[index + inputsStep];\r\n      const currentInput = form.elements[index];\r\n\r\n      if (fieldValue === \"\") {\r\n        setNextFocusInputAfterDelete({ index });\r\n      }\r\n\r\n      const regularActions = (\r\n        input: HTMLInputElement,\r\n        cursorPos?: number,\r\n        inputForTrigger?: HTMLInputElement\r\n      ) => {\r\n        event.preventDefault();\r\n        input.disabled = false;\r\n        if (inputForTrigger) triggerInput(inputForTrigger);\r\n        if (cursorPos) input.selectionStart = cursorPos;\r\n        input.focus();\r\n      };\r\n      switch (event.keyCode) {\r\n        case keyCodes.enter:\r\n          if (nextInput) {\r\n            regularActions(nextInput, nextInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.delete:\r\n          //  if we start deleting from the last task, we go up, and if we delete the first task, we go down to the last one.\r\n\r\n          // if (nextInput) {\r\n          //   if (currentInput.value.length === 1) {\r\n          //     setIsDisabled(false);\r\n          //     regularActions(nextInput, nextInput.value?.length, currentInput);\r\n          //   }\r\n          // } else\r\n          if (currentInput.value.length === 0 && prevInput) {\r\n            regularActions(prevInput, prevInput.value?.length, currentInput);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.topArrow:\r\n          if (prevInput) {\r\n            regularActions(prevInput, prevInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.bottomArrow:\r\n          if (nextInput) {\r\n            regularActions(nextInput, nextInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        case keyCodes.leftArrow:\r\n          if (currentInputCarretPosition === 0 && prevInput) {\r\n            regularActions(prevInput, prevInput.value?.length);\r\n          }\r\n\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n  return { nextFocusInput, handleKeyNavigation };\r\n};\r\n\r\nexport default useKeyboardNavigation;\r\n","import { taskDefaultModel, defaultNumberOfTasks } from \"constants/constants\";\r\nimport { IBlank, ITask } from \"constants/types\";\r\n\r\nexport const controlNumberOfTasks = (data: IBlank) => {\r\n  const tasksArrLength = data.tasks.length;\r\n\r\n  if (tasksArrLength >= defaultNumberOfTasks) {\r\n    const numberOfFilledFields = data.tasks.reduce(\r\n      (counter: number, task: ITask) => {\r\n        return task.label ? counter + 1 : counter;\r\n      },\r\n      0\r\n    );\r\n    // add new field if all is full\r\n    if (numberOfFilledFields === tasksArrLength) {\r\n      const updatedTasks = data.tasks;\r\n      const lastElementId = updatedTasks[updatedTasks.length - 1].id;\r\n\r\n      updatedTasks.push({\r\n        ...taskDefaultModel,\r\n        id: lastElementId + 1,\r\n      });\r\n      return { ...data, tasks: updatedTasks };\r\n    }\r\n    // delete empty fields\r\n    else if (numberOfFilledFields < tasksArrLength - 1) {\r\n      const filteredBlankTasks = data.tasks.filter(\r\n        (field: ITask, index: number) =>\r\n          field.label || index === tasksArrLength - 1\r\n      );\r\n      return { ...data, tasks: filteredBlankTasks };\r\n    } else {\r\n      return data;\r\n    }\r\n  }\r\n};\r\n\r\nexport const triggerInput = (inputField: any, enteredValue = \"\") => {\r\n  const input = inputField;\r\n  const lastValue = input.value;\r\n  input.value = enteredValue;\r\n\r\n  const event = new Event(\"input\", { bubbles: true });\r\n  const tracker = input._valueTracker!;\r\n\r\n  if (tracker) {\r\n    tracker.setValue(lastValue);\r\n  }\r\n\r\n  input.dispatchEvent(event);\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport TaskField from \"components/TaskField/TaskField\";\r\nimport useSaveData from \"hooks/useMount\";\r\nimport { AdditionalPopup } from \"components/AdditionalPopup/AdditionalPopup\";\r\nimport { controlNumberOfTasks } from \"helpers/helpers\";\r\nimport { IBlank, ITask, IUpdModel } from \"constants/types\";\r\nimport { IBlankProps } from \"./types\";\r\nimport useKeyboardNavigation from \"../../hooks/useKeyboardNavigation\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst Blank = (props: IBlankProps) => {\r\n  const { data, onSave } = props;\r\n\r\n  const [blankData, setBlankData] = useState<IBlank>({\r\n    tasks: data.tasks,\r\n    id: data.id,\r\n    date: data.date,\r\n    timeStatus: data.timeStatus,\r\n    additionalInfo: data.additionalInfo,\r\n  });\r\n\r\n  const dayOfWeek = moment(blankData.date).format(\"dddd\");\r\n\r\n  const formRef = useRef(null);\r\n  const { nextFocusInput, handleKeyNavigation } =\r\n    useKeyboardNavigation(formRef);\r\n\r\n  const configData = (model: IUpdModel) => {\r\n    if (model.name === \"tasks\") {\r\n      const updatedTasks = blankData.tasks.map((task: ITask) => {\r\n        return task.id === model.value.id ? model.value : task;\r\n      });\r\n\r\n      setBlankData((prevData) => {\r\n        const copyData = { ...prevData, tasks: updatedTasks };\r\n        const updatedData = controlNumberOfTasks(copyData);\r\n        return updatedData;\r\n      });\r\n    } else {\r\n      setBlankData((prevData) => {\r\n        return { ...prevData, [model.name]: model.value };\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (nextFocusInput.index !== null) {\r\n      formRef.current.elements[nextFocusInput.index].focus();\r\n    }\r\n  }, [nextFocusInput]);\r\n\r\n  useEffect(() => {\r\n    const initialFocus = () => {\r\n      const todayBlank = blankData.timeStatus === \"present\";\r\n      if (todayBlank && formRef) {\r\n        const form = formRef.current;\r\n        const firstInput = form.elements[0];\r\n        const lastInput = form.elements[form.elements.length - 1];\r\n\r\n        if (!firstInput.value) {\r\n          firstInput.focus();\r\n        } else {\r\n          lastInput.focus();\r\n        }\r\n      }\r\n    };\r\n    initialFocus();\r\n  }, []);\r\n\r\n  useSaveData(blankData, () => onSave(blankData));\r\n\r\n  return (\r\n    <div className={`blank ${blankData.timeStatus}`}>\r\n      <h2 className=\"week-day\">{dayOfWeek}</h2>\r\n      <p className=\"date\">{moment(blankData.date).format(\"MMM DD[, ] YY\")}</p>\r\n\r\n      <AdditionalPopup data={blankData} onFieldChange={configData} />\r\n\r\n      <form className=\"fields-list scroll\" ref={formRef}>\r\n        {blankData.tasks.map((task, index) => {\r\n          return (\r\n            <TaskField\r\n              data={task}\r\n              key={task.id}\r\n              listCounter={index}\r\n              blankId={blankData.id}\r\n              onFieldChange={configData}\r\n              handleKeyNavigation={handleKeyNavigation}\r\n              active={index !== blankData.tasks.length - 1}\r\n            />\r\n          );\r\n        })}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blank;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst getWindowDimensions = () => {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return { width, height };\r\n};\r\n\r\nconst useWindowDimensions = () => {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowDimensions(getWindowDimensions());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n};\r\n\r\nexport default useWindowDimensions;\r\n","export const desktopSettings = { slidesPerView: 5 };\r\nexport const mobileSettings = {\r\n  slidesPerView: 1.3,\r\n  centeredSlides: true,\r\n  spaceBetween: 30,\r\n};\r\nexport const nextBtnClass = \"btnNextSlide\";\r\nexport const prevBtnClass = \"btnPrevSlide\";\r\n","import { useEffect, useState } from \"react\";\r\nimport Blank from \"../Blank/Blank\";\r\nimport useWindowDimensions from \"hooks/useWindowDimensions\";\r\nimport { screenSize } from \"constants/constants\";\r\nimport {\r\n  desktopSettings,\r\n  mobileSettings,\r\n  nextBtnClass,\r\n  prevBtnClass,\r\n} from \"./constants\";\r\n\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport SwiperCore, { Navigation } from \"swiper\";\r\nimport \"swiper/components/navigation/navigation.min.css\";\r\nimport \"swiper/swiper.scss\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nSwiperCore.use([Navigation]);\r\n\r\nconst CarouselComponent = (props) => {\r\n  const { todaySlideIndex } = props;\r\n  const [swiperData, setSwiperData] = useState({\r\n    activeIndex: null,\r\n    swiper: null,\r\n  });\r\n\r\n  const { width } = useWindowDimensions();\r\n  const initSettings = width < screenSize.xs ? mobileSettings : desktopSettings;\r\n  const [settings, setSettings] = useState(initSettings);\r\n\r\n  const onSwiper = (swiper) => {\r\n    const initFocusSlide =\r\n      width < screenSize.xs ? todaySlideIndex : todaySlideIndex - 1;\r\n    swiper.slideTo(initFocusSlide, 0);\r\n  };\r\n  const navToHome = () => {\r\n    swiperData?.swiper.slideTo(todaySlideIndex - 1, 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (width < screenSize.xs) {\r\n      setSettings(mobileSettings);\r\n    } else if (width < screenSize.sm) {\r\n      setSettings({\r\n        slidesPerView: 2.5,\r\n        centeredSlides: true,\r\n      });\r\n    } else if (width < screenSize.md) {\r\n      setSettings({ slidesPerView: 4 });\r\n    } else if (width < screenSize.lg) {\r\n      setSettings({ slidesPerView: 4 });\r\n    } else {\r\n      setSettings(desktopSettings);\r\n    }\r\n  }, [width]);\r\n\r\n  const handleSlideChange = (swiper) => {\r\n    setSwiperData({ activeIndex: swiper.activeIndex, swiper });\r\n  };\r\n\r\n  const activeSlideNotToday = swiperData.activeIndex + 1 !== todaySlideIndex;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"buttons\">\r\n        <span className={`nav-btn btnSlide ${prevBtnClass}`}></span>\r\n        {activeSlideNotToday && (\r\n          <span\r\n            className=\"nav-btn nav-btn-small  home-page\"\r\n            onClick={navToHome}\r\n          ></span>\r\n        )}\r\n        <span className=\"nav-btn  nav-btn-small calendar\"></span>\r\n        <span className={`nav-btn btnSlide ${nextBtnClass}`}></span>\r\n      </div>\r\n\r\n      <Swiper\r\n        {...settings}\r\n        onSwiper={onSwiper}\r\n        pagination={true}\r\n        navigation={{ nextEl: `.${nextBtnClass}`, prevEl: `.${prevBtnClass}` }}\r\n        onSlideChange={handleSlideChange}\r\n      >\r\n        {props.data.map((data, idx) => {\r\n          return (\r\n            <SwiperSlide key={idx} virtualIndex={idx}>\r\n              <Blank data={data} key={idx} onSave={props.onSave} />\r\n            </SwiperSlide>\r\n          );\r\n        })}\r\n      </Swiper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CarouselComponent;\r\n","import { IBlank } from \"../../constants/types\";\r\nimport moment from \"moment\";\r\n\r\nexport const timeFormat = \"L\";\r\nexport const daysOfTheWeek = 7;\r\nexport const LSDataName = \"letoAppData\";\r\nexport const LSLastUpdateDateName = \"letoLastUpdateDate\";\r\n\r\nexport const updateStorage = (data: IBlank[]) => {\r\n  localStorage.setItem(LSDataName, JSON.stringify(data));\r\n};\r\n\r\nexport const currentDate = moment().format(timeFormat);\r\nexport const source = localStorage.getItem(LSDataName);\r\n","import { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport CarouselComponent from \"../Carousel/Carousel\";\r\nimport { blankDefaultModel } from \"../../constants/constants\";\r\nimport { IBlank } from \"constants/types\";\r\n\r\nimport {\r\n  timeFormat,\r\n  daysOfTheWeek,\r\n  LSLastUpdateDateName,\r\n  updateStorage,\r\n  currentDate,\r\n  source,\r\n} from \"./constants\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst Board = () => {\r\n  const [appData, setAppData] = useState(JSON.parse(source) || []);\r\n\r\n  const configTimeStatus = (newModel: IBlank, date: string) => {\r\n    const isDayInPast = moment(date).isBefore(currentDate);\r\n    const isDayInFuture = moment(date).isAfter(currentDate);\r\n    const isDayInPresent = moment(date).isSame(currentDate);\r\n    if (isDayInPast) newModel.timeStatus = \"past\";\r\n    else if (isDayInFuture) newModel.timeStatus = \"future\";\r\n    else if (isDayInPresent) {\r\n      newModel.timeStatus = \"present\";\r\n    }\r\n    return newModel;\r\n  };\r\n\r\n  const createBlanksByCount = (count: number, date?: string) => {\r\n    const blanksArr = [];\r\n    const isInitialApp = !date;\r\n    for (let i = isInitialApp ? -1 : 1; i <= count; i++) {\r\n      const nextDay: string = moment(date).add(i, \"days\").format(timeFormat);\r\n      const index = appData.length - 1 + i;\r\n      blanksArr.push(createNewBlank(nextDay, index));\r\n    }\r\n    return blanksArr;\r\n  };\r\n\r\n  const createNewBlank = (date: string, id: number) => {\r\n    const blank = { ...blankDefaultModel, date: date, id: id };\r\n    return configTimeStatus(blank, date);\r\n  };\r\n\r\n  const addNewBlanks = (data: IBlank[] | IBlank) => {\r\n    let updatedAppData = [];\r\n\r\n    if (Array.isArray(data)) {\r\n      updatedAppData = appData.concat(data);\r\n    } else {\r\n      updatedAppData.push(data);\r\n    }\r\n\r\n    setAppData(updatedAppData);\r\n    updateStorage(updatedAppData);\r\n  };\r\n\r\n  const onSave = (model: IBlank) => {\r\n    const updatedAppData = appData.map((blank: IBlank) => {\r\n      return blank.id === model.id ? model : blank;\r\n    });\r\n\r\n    setAppData(updatedAppData);\r\n    updateStorage(updatedAppData);\r\n  };\r\n\r\n  const onSlideEnded = () => {\r\n    const lastSlideDate = appData[appData.length - 1].date;\r\n    addNewBlanks(createBlanksByCount(daysOfTheWeek, lastSlideDate));\r\n  };\r\n\r\n  const todaySlideIndex = appData.findIndex((item: IBlank) =>\r\n    moment(item.date).isSame(currentDate)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const firstInitialApp = () => {\r\n      if (appData.length <= daysOfTheWeek) {\r\n        addNewBlanks(createBlanksByCount(daysOfTheWeek));\r\n      }\r\n    };\r\n    const everydayUpdateApp = (data: IBlank[]) => {\r\n      const lastUpdateDateSource = localStorage.getItem(LSLastUpdateDateName);\r\n      const lastUpdateDate = JSON.parse(lastUpdateDateSource);\r\n      const lastUpdateIsToday = moment(lastUpdateDate).isSame(currentDate);\r\n\r\n      if (!lastUpdateIsToday) {\r\n        const updatedAppData = data.map((item: IBlank) => {\r\n          return configTimeStatus(item, item.date);\r\n        });\r\n        updateStorage(updatedAppData);\r\n        setAppData(updatedAppData);\r\n        localStorage.setItem(LSLastUpdateDateName, JSON.stringify(currentDate));\r\n      }\r\n    };\r\n    everydayUpdateApp(appData);\r\n    firstInitialApp();\r\n  }, []);\r\n\r\n  // custom live pagination, month and week navigation in v2\r\n  const showPrevBlanks = () => {};\r\n  const showNextBlnks = () => {};\r\n  const navigateToDate = () => {};\r\n  const exportToExcel = () => {};\r\n\r\n  return (\r\n    <>\r\n      <div className=\"board-wrapper\">\r\n        <div className=\"container\">\r\n          <div className=\"board\">\r\n            <CarouselComponent\r\n              data={appData}\r\n              onSave={onSave}\r\n              onSlideEnded={onSlideEnded}\r\n              slidesCount={appData.length}\r\n              todaySlideIndex={todaySlideIndex}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\n\r\nexport const SettingsContext = React.createContext({\r\n  settings: null,\r\n  setTheme: (themeType: string) => {},\r\n});\r\n","import { useContext, useState } from \"react\";\r\nimport { SettingsContext } from \"context/SettingsContext\";\r\nimport \"./styles.scss\";\r\n\r\nconst ThemeSwitcher = () => {\r\n  const { settings, setTheme } = useContext(SettingsContext);\r\n  const defaultChecked = settings.theme === \"light\" ? false : true;\r\n\r\n  const [checked, setChecked] = useState(defaultChecked);\r\n\r\n  const handleChange = () => {\r\n    setChecked(!checked);\r\n    setTheme(checked ? \"light\" : \"dark\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"theme-btn\">\r\n      <label className=\"switch\">\r\n        <input\r\n          id=\"toggle\"\r\n          type=\"checkbox\"\r\n          checked={checked}\r\n          onChange={handleChange}\r\n        />\r\n        <span className=\"slider\"></span>\r\n      </label>\r\n      <div className=\"slide-block slide-out\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeSwitcher;\r\n","import React from \"react\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nimport ThemeSwitcher from \"components/Theme/ThemeSwitcher\";\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header-wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <h1 className=\"head-title\">LETO</h1>\r\n          <div className=\"right\">\r\n            <ThemeSwitcher />\r\n            <div className=\"account\">Ingvar</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import Rating from \"components/Rating/Rating\";\r\nimport \"./styles.scss\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer-wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"footer\">\r\n          {/* <nav className=\"footer-menu\">\r\n            <ul>\r\n              <li className=\"menu-item\">Contacts & Support</li>\r\n              <li className=\"menu-item\">Report</li>\r\n            </ul>\r\n          </nav>\r\n          <Rating /> */}\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export const LSSettingsName = \"letoSettings\";\r\nexport const appSettings: IAppSettings = {\r\n  theme: \"dark\",\r\n};\r\nexport interface IAppSettings {\r\n  theme: string;\r\n}\r\n","import \"./App.scss\";\r\nimport Board from \"components/Board/Board\";\r\nimport Header from \"components/Header/Header\";\r\nimport Footer from \"components/Footer/Footer\";\r\nimport { SettingsContext } from \"context/SettingsContext\";\r\nimport { useState } from \"react\";\r\nimport { appSettings, LSSettingsName, IAppSettings } from \"constants/settings\";\r\n\r\nimport \"components/Theme/dark-theme.scss\";\r\n\r\nconst storageSettings = JSON.parse(localStorage.getItem(LSSettingsName));\r\nif (!storageSettings) {\r\n  localStorage.setItem(LSSettingsName, JSON.stringify(appSettings));\r\n}\r\nconst settings = storageSettings || appSettings;\r\n\r\nconst updateSettings = (settings: IAppSettings) => {\r\n  localStorage.setItem(LSSettingsName, JSON.stringify(settings));\r\n};\r\n\r\nconst App = () => {\r\n  const [theme, changeTheme] = useState(settings.theme);\r\n\r\n  const setTheme = (theme: string) => {\r\n    changeTheme(theme);\r\n    settings.theme = theme;\r\n    updateSettings(settings);\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={{ settings, setTheme }}>\r\n      <div className={`LETO ${theme}`}>\r\n        <Header />\r\n        <Board />\r\n        <Footer />\r\n      </div>\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}